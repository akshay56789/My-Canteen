{"ast":null,"code":"import \"expo/build/Expo.fx\";\nimport \"@expo/metro-runtime\";\nimport { withErrorOverlay } from \"@expo/metro-runtime/error-overlay\";\nimport * as React from \"react\";\nimport AppRegistry from \"react-native-web/dist/exports/AppRegistry\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { createRoot, hydrateRoot } from \"./createRoot\";\nvar rootTag = null;\nexport default function registerRootComponent(component) {\n  var qualifiedComponent = component;\n\n  if (process.env.NODE_ENV !== \"production\") {\n    var _ref = require(\"expo/build/launch/withDevTools\"),\n        withDevTools = _ref.withDevTools;\n\n    qualifiedComponent = withErrorOverlay(withDevTools(component));\n  }\n\n  if (Platform.OS !== \"web\") {\n    AppRegistry.registerComponent(\"main\", function () {\n      return qualifiedComponent;\n    });\n  } else if (typeof document !== \"undefined\") {\n    var tag = document.getElementById(\"root\");\n\n    if (!tag) {\n      tag = document.getElementById(\"main\");\n\n      if (process.env.NODE_ENV !== \"production\") {\n        if (tag) {\n          console.warn('Mounting the root React component to an HTML element with id \"main\" is deprecated. Use id \"root\" instead.');\n        }\n      }\n    }\n\n    if (!tag) {\n      throw new Error('Required HTML element with id \"root\" was not found in the document HTML. This is required for mounting the root React component.');\n    }\n\n    if (process.env.EXPO_PUBLIC_USE_STATIC) {\n      hydrateRoot(tag, React.createElement(qualifiedComponent));\n    } else {\n      rootTag ??= createRoot(tag);\n      rootTag.render(React.createElement(qualifiedComponent));\n    }\n  }\n}","map":{"version":3,"names":["withErrorOverlay","React","createRoot","hydrateRoot","rootTag","registerRootComponent","component","qualifiedComponent","process","env","NODE_ENV","require","withDevTools","Platform","OS","AppRegistry","registerComponent","document","tag","getElementById","console","warn","Error","EXPO_PUBLIC_USE_STATIC","createElement","render"],"sources":["C:/Users/hello/OneDrive/Desktop/React-native/canteen-project/client/node_modules/expo-router/src/fork/expo/registerRootComponent.tsx"],"sourcesContent":["// Fork of:\n// https://github.com/expo/expo/blob/main/packages/expo/src/launch/registerRootComponent.tsx\n// Originally made in Expo SDK 47 to add support for React 18 and Metro web.\nimport \"expo/build/Expo.fx\";\n\n// NOTE(EvanBacon): Add Metro web support to the global runtime.\nimport \"@expo/metro-runtime\";\n\n// @ts-ignore: build order issue\nimport { withErrorOverlay } from \"@expo/metro-runtime/error-overlay\";\nimport * as React from \"react\";\nimport { AppRegistry, Platform } from \"react-native\";\n\nimport { createRoot, hydrateRoot } from \"./createRoot\";\n\ntype InitialProps = {\n  exp: {\n    notification?: any;\n    manifestString?: string;\n    [key: string]: any;\n  };\n  shell?: boolean;\n  shellManifestUrl?: string;\n  [key: string]: any;\n};\n\n// Web root tag is preserved for re-use between refreshes.\nlet rootTag: import(\"react-dom/client\").Root | null = null;\n\nexport default function registerRootComponent<P extends InitialProps>(\n  component: React.ComponentType<P>\n): void {\n  let qualifiedComponent = component;\n\n  if (process.env.NODE_ENV !== \"production\") {\n    const { withDevTools } =\n      require(\"expo/build/launch/withDevTools\") as typeof import(\"expo/build/launch/withDevTools\");\n    // Add error support to the root component.\n    qualifiedComponent = withErrorOverlay(withDevTools(component));\n  }\n\n  if (Platform.OS !== \"web\") {\n    AppRegistry.registerComponent(\"main\", () => qualifiedComponent);\n  } else if (\n    // Skip querying the DOM if we're in a Node.js environment.\n    typeof document !== \"undefined\"\n  ) {\n    let tag = document.getElementById(\"root\");\n\n    if (!tag) {\n      tag = document.getElementById(\"main\");\n      if (process.env.NODE_ENV !== \"production\") {\n        // This block will be removed in production\n        if (tag) {\n          console.warn(\n            'Mounting the root React component to an HTML element with id \"main\" is deprecated. Use id \"root\" instead.'\n          );\n        }\n      }\n    }\n\n    if (!tag) {\n      throw new Error(\n        'Required HTML element with id \"root\" was not found in the document HTML. This is required for mounting the root React component.'\n      );\n    }\n\n    // Using React 18 directly because `react-native-web` still uses the old API:\n    // https://github.com/necolas/react-native-web/blob/e8098fd029102d7801c32c1ede792bce01808c00/packages/react-native-web/src/exports/render/index.js#L10\n    if (process.env.EXPO_PUBLIC_USE_STATIC) {\n      hydrateRoot(tag, React.createElement(qualifiedComponent));\n    } else {\n      rootTag ??= createRoot(tag);\n      rootTag.render(React.createElement(qualifiedComponent));\n    }\n  }\n}\n"],"mappings":"AAGA,OAAO,oBAAP;AAGA,OAAO,qBAAP;AAGA,SAASA,gBAAT,QAAiC,mCAAjC;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;;;AAGA,SAASC,UAAT,EAAqBC,WAArB;AAcA,IAAIC,OAA+C,GAAG,IAAtD;AAEA,eAAe,SAASC,qBAAT,CACbC,SADa,EAEP;EACN,IAAIC,kBAAkB,GAAGD,SAAzB;;EAEA,IAAIE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;IACzC,WACEC,OAAO,CAAC,gCAAD,CADT;IAAA,IAAQC,YAAR,QAAQA,YAAR;;IAGAL,kBAAkB,GAAGP,gBAAgB,CAACY,YAAY,CAACN,SAAD,CAAb,CAArC;EACD;;EAED,IAAIO,QAAQ,CAACC,EAAT,KAAgB,KAApB,EAA2B;IACzBC,WAAW,CAACC,iBAAZ,CAA8B,MAA9B,EAAsC;MAAA,OAAMT,kBAAN;IAAA,CAAtC;EACD,CAFD,MAEO,IAEL,OAAOU,QAAP,KAAoB,WAFf,EAGL;IACA,IAAIC,GAAG,GAAGD,QAAQ,CAACE,cAAT,CAAwB,MAAxB,CAAV;;IAEA,IAAI,CAACD,GAAL,EAAU;MACRA,GAAG,GAAGD,QAAQ,CAACE,cAAT,CAAwB,MAAxB,CAAN;;MACA,IAAIX,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;QAEzC,IAAIQ,GAAJ,EAAS;UACPE,OAAO,CAACC,IAAR,CACE,2GADF;QAGD;MACF;IACF;;IAED,IAAI,CAACH,GAAL,EAAU;MACR,MAAM,IAAII,KAAJ,CACJ,kIADI,CAAN;IAGD;;IAID,IAAId,OAAO,CAACC,GAAR,CAAYc,sBAAhB,EAAwC;MACtCpB,WAAW,CAACe,GAAD,EAAMjB,KAAK,CAACuB,aAAN,CAAoBjB,kBAApB,CAAN,CAAX;IACD,CAFD,MAEO;MACLH,OAAO,KAAKF,UAAU,CAACgB,GAAD,CAAtB;MACAd,OAAO,CAACqB,MAAR,CAAexB,KAAK,CAACuB,aAAN,CAAoBjB,kBAApB,CAAf;IACD;EACF;AACF"},"metadata":{},"sourceType":"module"}