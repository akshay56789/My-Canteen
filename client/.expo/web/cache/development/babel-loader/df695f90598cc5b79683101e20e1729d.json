{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar pretty_format_1 = __importStar(require(\"pretty-format\"));\n\nvar LoadingView_1 = __importDefault(require(\"./LoadingView\"));\n\nvar LogBox_1 = __importDefault(require(\"./error-overlay/LogBox\"));\n\nvar getDevServer_1 = __importDefault(require(\"./getDevServer\"));\n\nvar MetroHMRClient = require(\"metro-runtime/src/modules/HMRClient\");\n\nvar pendingEntryPoints = [];\nvar hmrClient = null;\nvar hmrUnavailableReason = null;\nvar currentCompileErrorMessage = null;\nvar didConnect = false;\nvar pendingLogs = [];\n\nfunction assert(foo, msg) {\n  if (!foo) throw new Error(msg);\n}\n\nvar HMRClient = {\n  enable: function enable() {\n    if (hmrUnavailableReason !== null) {\n      throw new Error(hmrUnavailableReason);\n    }\n\n    assert(hmrClient, \"Expected HMRClient.setup() call at startup.\");\n    hmrClient.send(JSON.stringify({\n      type: \"log-opt-in\"\n    }));\n    var hasUpdates = hmrClient.hasPendingUpdates();\n\n    if (hasUpdates) {\n      LoadingView_1.default.showMessage(\"Refreshing...\", \"refresh\");\n    }\n\n    try {\n      hmrClient.enable();\n    } finally {\n      if (hasUpdates) {\n        LoadingView_1.default.hide();\n      }\n    }\n\n    showCompileError();\n  },\n  disable: function disable() {\n    assert(hmrClient, \"Expected HMRClient.setup() call at startup.\");\n    hmrClient.disable();\n  },\n  registerBundle: function registerBundle(requestUrl) {\n    assert(hmrClient, \"Expected HMRClient.setup() call at startup.\");\n    pendingEntryPoints.push(requestUrl);\n    registerBundleEntryPoints(hmrClient);\n  },\n  log: function log(level, data) {\n    if (!hmrClient) {\n      pendingLogs.push([level, data]);\n\n      if (pendingLogs.length > 100) {\n        pendingLogs.shift();\n      }\n\n      return;\n    }\n\n    try {\n      hmrClient.send(JSON.stringify({\n        type: \"log\",\n        level: level,\n        mode: \"BRIDGE\",\n        data: data.map(function (item) {\n          return typeof item === \"string\" ? item : (0, pretty_format_1.default)(item, {\n            escapeString: true,\n            highlight: true,\n            maxDepth: 3,\n            min: true,\n            plugins: [pretty_format_1.plugins.ReactElement]\n          });\n        })\n      }));\n    } catch (_unused) {}\n  },\n  setup: function setup(_ref) {\n    var isEnabled = _ref.isEnabled;\n    assert(!hmrClient, \"Cannot initialize hmrClient twice\");\n    var serverScheme = window.location.protocol === \"https:\" ? \"wss\" : \"ws\";\n    var client = new MetroHMRClient(serverScheme + \"://\" + window.location.host + \"/hot\");\n    hmrClient = client;\n\n    var _ref2 = (0, getDevServer_1.default)(),\n        fullBundleUrl = _ref2.fullBundleUrl;\n\n    pendingEntryPoints.push(fullBundleUrl);\n    client.on(\"connection-error\", function (e) {\n      var error = \"Cannot connect to Metro.\\n \\n Try the following to fix the issue:\\n - Ensure the Metro dev server is running and available on the same network as this device\";\n      error += \"\\n \\n URL: \" + window.location.host + \"\\n \\n Error: \" + e.message;\n      setHMRUnavailableReason(error);\n    });\n    client.on(\"update-start\", function (_ref3) {\n      var isInitialUpdate = _ref3.isInitialUpdate;\n      currentCompileErrorMessage = null;\n      didConnect = true;\n\n      if (client.isEnabled() && !isInitialUpdate) {\n        LoadingView_1.default.showMessage(\"Refreshing...\", \"refresh\");\n      }\n    });\n    client.on(\"update\", function (_ref4) {\n      var isInitialUpdate = _ref4.isInitialUpdate;\n\n      if (client.isEnabled() && !isInitialUpdate) {\n        dismissRedbox();\n        LogBox_1.default.clearAllLogs();\n      }\n    });\n    client.on(\"update-done\", function () {\n      LoadingView_1.default.hide();\n    });\n    client.on(\"error\", function (data) {\n      LoadingView_1.default.hide();\n\n      if (data.type === \"GraphNotFoundError\") {\n        client.close();\n        setHMRUnavailableReason(\"Metro has restarted since the last edit. Reload to reconnect.\");\n      } else if (data.type === \"RevisionNotFoundError\") {\n        client.close();\n        setHMRUnavailableReason(\"Metro and the client are out of sync. Reload to reconnect.\");\n      } else {\n        currentCompileErrorMessage = data.type + \" \" + data.message;\n\n        if (client.isEnabled()) {\n          showCompileError();\n        }\n      }\n    });\n    client.on(\"close\", function (closeEvent) {\n      LoadingView_1.default.hide();\n      var isNormalOrUnsetCloseReason = closeEvent == null || closeEvent.code === 1000 || closeEvent.code === 1005 || closeEvent.code == null;\n      setHMRUnavailableReason((isNormalOrUnsetCloseReason ? \"Disconnected from Metro.\" : \"Disconnected from Metro (\" + closeEvent.code + \": \\\"\" + closeEvent.reason + \"\\\").\") + \"\\n\\nTo reconnect:\\n- Ensure that Metro is running and available on the same network\\n- Reload this app (will trigger further help if Metro cannot be connected to)\\n      \");\n    });\n\n    if (isEnabled) {\n      HMRClient.enable();\n    } else {\n      HMRClient.disable();\n    }\n\n    registerBundleEntryPoints(hmrClient);\n    flushEarlyLogs();\n  }\n};\n\nfunction setHMRUnavailableReason(reason) {\n  assert(hmrClient, \"Expected HMRClient.setup() call at startup.\");\n\n  if (hmrUnavailableReason !== null) {\n    return;\n  }\n\n  hmrUnavailableReason = reason;\n\n  if (hmrClient.isEnabled() && didConnect) {\n    console.warn(reason);\n  }\n}\n\nfunction registerBundleEntryPoints(client) {\n  if (hmrUnavailableReason != null) {\n    window.location.reload();\n    return;\n  }\n\n  if (pendingEntryPoints.length > 0) {\n    client === null || client === void 0 ? void 0 : client.send(JSON.stringify({\n      type: \"register-entrypoints\",\n      entryPoints: pendingEntryPoints\n    }));\n    pendingEntryPoints.length = 0;\n  }\n}\n\nfunction flushEarlyLogs() {\n  try {\n    pendingLogs.forEach(function (_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 2),\n          level = _ref6[0],\n          data = _ref6[1];\n\n      HMRClient.log(level, data);\n    });\n  } finally {\n    pendingLogs.length = 0;\n  }\n}\n\nfunction dismissRedbox() {}\n\nfunction showCompileError() {\n  if (currentCompileErrorMessage === null) {\n    return;\n  }\n\n  dismissRedbox();\n  var message = currentCompileErrorMessage;\n  currentCompileErrorMessage = null;\n  var error = new Error(message);\n  error.preventSymbolication = true;\n  throw error;\n}\n\nexports.default = HMRClient;","map":{"version":3,"sources":["../src/HMRClient.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Evan Bacon.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * Based on this but with web support:\n * https://github.com/facebook/react-native/blob/086714b02b0fb838dee5a66c5bcefe73b53cf3df/Libraries/Utilities/HMRClient.js\n */\nimport prettyFormat, { plugins } from \"pretty-format\";\n\nimport LoadingView from \"./LoadingView\";\nimport LogBox from \"./error-overlay/LogBox\";\nimport getDevServer from \"./getDevServer\";\n\nconst MetroHMRClient = require(\"metro-runtime/src/modules/HMRClient\");\nconst pendingEntryPoints: string[] = [];\n\ntype HMRClientType = {\n  send: (msg: string) => void;\n  isEnabled: () => boolean;\n  disable: () => void;\n  enable: () => void;\n  hasPendingUpdates: () => boolean;\n};\n\nlet hmrClient: HMRClientType | null = null;\nlet hmrUnavailableReason: string | null = null;\nlet currentCompileErrorMessage: string | null = null;\nlet didConnect: boolean = false;\nconst pendingLogs: [LogLevel, any[]][] = [];\n\ntype LogLevel =\n  | \"trace\"\n  | \"info\"\n  | \"warn\"\n  | \"error\"\n  | \"log\"\n  | \"group\"\n  | \"groupCollapsed\"\n  | \"groupEnd\"\n  | \"debug\";\n\nexport type HMRClientNativeInterface = {\n  enable(): void;\n  disable(): void;\n  registerBundle(requestUrl: string): void;\n  log(level: LogLevel, data: any[]): void;\n  setup(props: { isEnabled: boolean }): void;\n};\n\nfunction assert(foo: any, msg: string): asserts foo {\n  if (!foo) throw new Error(msg);\n}\n\n/**\n * HMR Client that receives from the server HMR updates and propagates them\n * runtime to reflects those changes.\n */\nconst HMRClient: HMRClientNativeInterface = {\n  enable() {\n    if (hmrUnavailableReason !== null) {\n      // If HMR became unavailable while you weren't using it,\n      // explain why when you try to turn it on.\n      // This is an error (and not a warning) because it is shown\n      // in response to a direct user action.\n      throw new Error(hmrUnavailableReason);\n    }\n\n    assert(hmrClient, \"Expected HMRClient.setup() call at startup.\");\n\n    // We use this for internal logging only.\n    // It doesn't affect the logic.\n    hmrClient.send(JSON.stringify({ type: \"log-opt-in\" }));\n\n    // When toggling Fast Refresh on, we might already have some stashed updates.\n    // Since they'll get applied now, we'll show a banner.\n    const hasUpdates = hmrClient!.hasPendingUpdates();\n\n    if (hasUpdates) {\n      LoadingView.showMessage(\"Refreshing...\", \"refresh\");\n    }\n    try {\n      hmrClient.enable();\n    } finally {\n      if (hasUpdates) {\n        LoadingView.hide();\n      }\n    }\n\n    // There could be a compile error while Fast Refresh was off,\n    // but we ignored it at the time. Show it now.\n    showCompileError();\n  },\n\n  disable() {\n    assert(hmrClient, \"Expected HMRClient.setup() call at startup.\");\n    hmrClient.disable();\n  },\n\n  registerBundle(requestUrl: string) {\n    assert(hmrClient, \"Expected HMRClient.setup() call at startup.\");\n    pendingEntryPoints.push(requestUrl);\n    registerBundleEntryPoints(hmrClient);\n  },\n\n  log(level: LogLevel, data: any[]) {\n    if (!hmrClient) {\n      // Catch a reasonable number of early logs\n      // in case hmrClient gets initialized later.\n      pendingLogs.push([level, data]);\n      if (pendingLogs.length > 100) {\n        pendingLogs.shift();\n      }\n      return;\n    }\n    try {\n      hmrClient.send(\n        JSON.stringify({\n          type: \"log\",\n          level,\n          mode: \"BRIDGE\",\n          data: data.map((item) =>\n            typeof item === \"string\"\n              ? item\n              : prettyFormat(item, {\n                  escapeString: true,\n                  highlight: true,\n                  maxDepth: 3,\n                  min: true,\n                  plugins: [plugins.ReactElement],\n                })\n          ),\n        })\n      );\n    } catch {\n      // If sending logs causes any failures we want to silently ignore them\n      // to ensure we do not cause infinite-logging loops.\n    }\n  },\n\n  // Called once by the bridge on startup, even if Fast Refresh is off.\n  // It creates the HMR client but doesn't actually set up the socket yet.\n  setup({ isEnabled }: { isEnabled: boolean }) {\n    assert(!hmrClient, \"Cannot initialize hmrClient twice\");\n\n    const serverScheme = window.location.protocol === \"https:\" ? \"wss\" : \"ws\";\n    const client = new MetroHMRClient(\n      `${serverScheme}://${window.location.host}/hot`\n    );\n    hmrClient = client;\n\n    const { fullBundleUrl } = getDevServer();\n    pendingEntryPoints.push(\n      // HMRServer understands regular bundle URLs, so prefer that in case\n      // there are any important URL parameters we can't reconstruct from\n      // `setup()`'s arguments.\n      fullBundleUrl\n    );\n\n    client.on(\"connection-error\", (e: Error) => {\n      let error = `Cannot connect to Metro.\n \n Try the following to fix the issue:\n - Ensure the Metro dev server is running and available on the same network as this device`;\n      error += `\n \n URL: ${window.location.host}\n \n Error: ${e.message}`;\n\n      setHMRUnavailableReason(error);\n    });\n\n    client.on(\n      \"update-start\",\n      ({ isInitialUpdate }: { isInitialUpdate?: boolean }) => {\n        currentCompileErrorMessage = null;\n        didConnect = true;\n\n        if (client.isEnabled() && !isInitialUpdate) {\n          LoadingView.showMessage(\"Refreshing...\", \"refresh\");\n        }\n      }\n    );\n\n    client.on(\n      \"update\",\n      ({ isInitialUpdate }: { isInitialUpdate?: boolean }) => {\n        if (client.isEnabled() && !isInitialUpdate) {\n          dismissRedbox();\n          LogBox.clearAllLogs();\n        }\n      }\n    );\n\n    client.on(\"update-done\", () => {\n      LoadingView.hide();\n    });\n\n    client.on(\"error\", (data: { type: string; message: string }) => {\n      LoadingView.hide();\n\n      if (data.type === \"GraphNotFoundError\") {\n        client.close();\n        setHMRUnavailableReason(\n          \"Metro has restarted since the last edit. Reload to reconnect.\"\n        );\n      } else if (data.type === \"RevisionNotFoundError\") {\n        client.close();\n        setHMRUnavailableReason(\n          \"Metro and the client are out of sync. Reload to reconnect.\"\n        );\n      } else {\n        currentCompileErrorMessage = `${data.type} ${data.message}`;\n        if (client.isEnabled()) {\n          showCompileError();\n        }\n      }\n    });\n\n    client.on(\"close\", (closeEvent: { code: number; reason: string }) => {\n      LoadingView.hide();\n\n      // https://www.rfc-editor.org/rfc/rfc6455.html#section-7.4.1\n      // https://www.rfc-editor.org/rfc/rfc6455.html#section-7.1.5\n      const isNormalOrUnsetCloseReason =\n        closeEvent == null ||\n        closeEvent.code === 1000 ||\n        closeEvent.code === 1005 ||\n        closeEvent.code == null;\n\n      setHMRUnavailableReason(\n        `${\n          isNormalOrUnsetCloseReason\n            ? \"Disconnected from Metro.\"\n            : `Disconnected from Metro (${closeEvent.code}: \"${closeEvent.reason}\").`\n        }\n\nTo reconnect:\n- Ensure that Metro is running and available on the same network\n- Reload this app (will trigger further help if Metro cannot be connected to)\n      `\n      );\n    });\n\n    if (isEnabled) {\n      HMRClient.enable();\n    } else {\n      HMRClient.disable();\n    }\n\n    registerBundleEntryPoints(hmrClient);\n    flushEarlyLogs();\n  },\n};\n\nfunction setHMRUnavailableReason(reason: string) {\n  assert(hmrClient, \"Expected HMRClient.setup() call at startup.\");\n  if (hmrUnavailableReason !== null) {\n    // Don't show more than one warning.\n    return;\n  }\n  hmrUnavailableReason = reason;\n\n  // We only want to show a warning if Fast Refresh is on *and* if we ever\n  // previously managed to connect successfully. We don't want to show\n  // the warning to native engineers who use cached bundles without Metro.\n  if (hmrClient.isEnabled() && didConnect) {\n    console.warn(reason);\n    // (Not using the `warning` module to prevent a Buck cycle.)\n  }\n}\n\nfunction registerBundleEntryPoints(client: HMRClientType | null) {\n  if (hmrUnavailableReason != null) {\n    // \"Bundle Splitting – Metro disconnected\"\n    window.location.reload();\n    return;\n  }\n\n  if (pendingEntryPoints.length > 0) {\n    client?.send(\n      JSON.stringify({\n        type: \"register-entrypoints\",\n        entryPoints: pendingEntryPoints,\n      })\n    );\n    pendingEntryPoints.length = 0;\n  }\n}\n\nfunction flushEarlyLogs() {\n  try {\n    pendingLogs.forEach(([level, data]) => {\n      HMRClient.log(level, data);\n    });\n  } finally {\n    pendingLogs.length = 0;\n  }\n}\n\nfunction dismissRedbox() {\n  // TODO(EvanBacon): Error overlay for web.\n}\n\nfunction showCompileError() {\n  if (currentCompileErrorMessage === null) {\n    return;\n  }\n\n  // Even if there is already a redbox, syntax errors are more important.\n  // Otherwise you risk seeing a stale runtime error while a syntax error is more recent.\n  dismissRedbox();\n\n  const message = currentCompileErrorMessage;\n  currentCompileErrorMessage = null;\n\n  const error = new Error(message);\n  // Symbolicating compile errors is wasted effort\n  // because the stack trace is meaningless:\n  // @ts-expect-error\n  error.preventSymbolication = true;\n  throw error;\n}\n\nexport default HMRClient;\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}