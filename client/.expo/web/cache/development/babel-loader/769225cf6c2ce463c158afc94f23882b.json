{"ast":null,"code":"import React from \"react\";\nimport { useNavigation } from \"../useNavigation\";\nvar useLayoutEffect = typeof window !== \"undefined\" ? React.useLayoutEffect : function () {};\nexport function Screen(_ref) {\n  var name = _ref.name,\n      redirect = _ref.redirect,\n      options = _ref.options;\n  var navigation = useNavigation(name);\n  useLayoutEffect(function () {\n    navigation.setOptions(options != null ? options : {});\n  }, [navigation, options]);\n\n  if (process.env.NODE_ENV !== \"production\") {\n    React.useEffect(function () {\n      if (redirect != null) {\n        throw new Error(\"Screen components should only use the `redirect` prop when nested directly inside a Layout component.\");\n      }\n    }, [name, redirect]);\n  }\n\n  return null;\n}","map":{"version":3,"names":["React","useNavigation","useLayoutEffect","window","Screen","name","redirect","options","navigation","setOptions","process","env","NODE_ENV","useEffect","Error"],"sources":["C:/Users/hello/OneDrive/Desktop/React-native/canteen-project/client/node_modules/expo-router/src/views/Screen.tsx"],"sourcesContent":["import React from \"react\";\n\nimport { useNavigation } from \"../useNavigation\";\n\nexport type ScreenProps<\n  TOptions extends Record<string, any> = Record<string, any>\n> = {\n  /**\n   * Name is required when used inside a Layout component.\n   *\n   * When used in a route, this can be an absolute path like `/(root)` to the parent route or a relative path like `../../` to the parent route.\n   * This should not be used inside of a Layout component.\n   * @example `/(root)` maps to a layout route `/app/(root).tsx`.\n   */\n  name?: string;\n\n  /** Should redirect away from this screen. */\n  redirect?: boolean;\n\n  initialParams?: { [key: string]: any };\n  options?: TOptions;\n};\n\nconst useLayoutEffect =\n  typeof window !== \"undefined\" ? React.useLayoutEffect : function () {};\n\n/** Component for setting the current screen's options dynamically. */\nexport function Screen<TOptions extends object = object>({\n  name,\n  redirect,\n  options,\n}: ScreenProps<TOptions>) {\n  const navigation = useNavigation(name);\n\n  useLayoutEffect(() => {\n    navigation.setOptions(options ?? {});\n  }, [navigation, options]);\n\n  if (process.env.NODE_ENV !== \"production\") {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useEffect(() => {\n      if (redirect != null) {\n        throw new Error(\n          \"Screen components should only use the `redirect` prop when nested directly inside a Layout component.\"\n        );\n      }\n    }, [name, redirect]);\n  }\n\n  return null;\n}\n"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,aAAT;AAqBA,IAAMC,eAAe,GACnB,OAAOC,MAAP,KAAkB,WAAlB,GAAgCH,KAAK,CAACE,eAAtC,GAAwD,YAAY,CAAE,CADxE;AAIA,OAAO,SAASE,MAAT,OAImB;EAAA,IAHxBC,IAGwB,QAHxBA,IAGwB;EAAA,IAFxBC,QAEwB,QAFxBA,QAEwB;EAAA,IADxBC,OACwB,QADxBA,OACwB;EACxB,IAAMC,UAAU,GAAGP,aAAa,CAACI,IAAD,CAAhC;EAEAH,eAAe,CAAC,YAAM;IACpBM,UAAU,CAACC,UAAX,CAAsBF,OAAtB,WAAsBA,OAAtB,GAAiC,EAAjC;EACD,CAFc,EAEZ,CAACC,UAAD,EAAaD,OAAb,CAFY,CAAf;;EAIA,IAAIG,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;IAEzCZ,KAAK,CAACa,SAAN,CAAgB,YAAM;MACpB,IAAIP,QAAQ,IAAI,IAAhB,EAAsB;QACpB,MAAM,IAAIQ,KAAJ,CACJ,uGADI,CAAN;MAGD;IACF,CAND,EAMG,CAACT,IAAD,EAAOC,QAAP,CANH;EAOD;;EAED,OAAO,IAAP;AACD"},"metadata":{},"sourceType":"module"}