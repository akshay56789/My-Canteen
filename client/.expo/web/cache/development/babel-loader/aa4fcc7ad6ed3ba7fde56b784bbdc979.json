{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LogBoxButton = void 0;\n\nvar react_1 = __importStar(require(\"react\"));\n\nvar react_native_1 = require(\"react-native-web/dist/index\");\n\nvar LogBoxStyle = __importStar(require(\"./LogBoxStyle\"));\n\nfunction LogBoxButton(props) {\n  var _ref = (0, react_1.useState)(false),\n      _ref2 = _slicedToArray(_ref, 2),\n      pressed = _ref2[0],\n      setPressed = _ref2[1];\n\n  var backgroundColor = props.backgroundColor;\n\n  if (!backgroundColor) {\n    backgroundColor = {\n      default: LogBoxStyle.getBackgroundColor(0.95),\n      pressed: LogBoxStyle.getBackgroundColor(0.6)\n    };\n  }\n\n  var content = react_1.default.createElement(react_native_1.View, {\n    style: react_native_1.StyleSheet.compose(_objectSpread({\n      backgroundColor: pressed ? backgroundColor.pressed : backgroundColor.default\n    }, react_native_1.Platform.select({\n      web: {\n        cursor: \"pointer\"\n      }\n    })), props.style)\n  }, props.children);\n  return props.onPress == null ? content : react_1.default.createElement(react_native_1.TouchableWithoutFeedback, {\n    hitSlop: props.hitSlop,\n    onPress: props.onPress,\n    onPressIn: function onPressIn() {\n      return setPressed(true);\n    },\n    onPressOut: function onPressOut() {\n      return setPressed(false);\n    }\n  }, content);\n}\n\nexports.LogBoxButton = LogBoxButton;","map":{"version":3,"sources":["../../../src/error-overlay/UI/LogBoxButton.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAOA,IAAA,OAAA,GAAA,YAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;;;AAWA,IAAA,WAAA,GAAA,YAAA,CAAA,OAAA,iBAAA,CAAA;;AAaA,SAAgB,YAAhB,CAA6B,KAA7B,EAAyC;EACvC,WAA8B,CAAA,GAAA,OAAA,CAAA,QAAA,EAAS,KAAT,CAA9B;EAAA;EAAA,IAAO,OAAP;EAAA,IAAgB,UAAhB;;EAEA,IAAI,eAAe,GAAG,KAAK,CAAC,eAA5B;;EACA,IAAI,CAAC,eAAL,EAAsB;IACpB,eAAe,GAAG;MAChB,OAAO,EAAE,WAAW,CAAC,kBAAZ,CAA+B,IAA/B,CADO;MAEhB,OAAO,EAAE,WAAW,CAAC,kBAAZ,CAA+B,GAA/B;IAFO,CAAlB;EAID;;EAED,IAAM,OAAO,GACX,OAAA,CAAA,OAAA,CAAA,aAAA,CAAC,cAAA,CAAA,IAAD,EAAK;IACH,KAAK,EAAE,cAAA,CAAA,UAAA,CAAW,OAAX;MAEH,eAAe,EAAE,OAAO,GACpB,eAAe,CAAC,OADI,GAEpB,eAAe,CAAC;IAJjB,GAKA,cAAA,CAAA,QAAA,CAAS,MAAT,CAAgB;MACjB,GAAG,EAAE;QACH,MAAM,EAAE;MADL;IADY,CAAhB,CALA,GAWL,KAAK,CAAC,KAXD;EADJ,CAAL,EAeG,KAAK,CAAC,QAfT,CADF;EAoBA,OAAO,KAAK,CAAC,OAAN,IAAiB,IAAjB,GACL,OADK,GAGL,OAAA,CAAA,OAAA,CAAA,aAAA,CAAC,cAAA,CAAA,wBAAD,EAAyB;IACvB,OAAO,EAAE,KAAK,CAAC,OADQ;IAEvB,OAAO,EAAE,KAAK,CAAC,OAFQ;IAGvB,SAAS,EAAE;MAAA,OAAM,UAAU,CAAC,IAAD,CAAhB;IAAA,CAHY;IAIvB,UAAU,EAAE;MAAA,OAAM,UAAU,CAAC,KAAD,CAAhB;IAAA;EAJW,CAAzB,EAMG,OANH,CAHF;AAYD;;AA3CD,OAAA,CAAA,YAAA,GAAA,YAAA","sourcesContent":["/**\n * Copyright (c) Evan Bacon.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React, { useState } from \"react\";\nimport {\n  GestureResponderEvent,\n  Insets,\n  Platform,\n  StyleSheet,\n  TouchableWithoutFeedback,\n  View,\n  ViewStyle,\n} from \"react-native\";\n\nimport * as LogBoxStyle from \"./LogBoxStyle\";\n\ntype Props = {\n  backgroundColor: {\n    default: string;\n    pressed: string;\n  };\n  children?: any;\n  hitSlop?: Insets;\n  onPress?: ((event: GestureResponderEvent) => void) | null;\n  style?: ViewStyle;\n};\n\nexport function LogBoxButton(props: Props) {\n  const [pressed, setPressed] = useState(false);\n\n  let backgroundColor = props.backgroundColor;\n  if (!backgroundColor) {\n    backgroundColor = {\n      default: LogBoxStyle.getBackgroundColor(0.95),\n      pressed: LogBoxStyle.getBackgroundColor(0.6),\n    };\n  }\n\n  const content = (\n    <View\n      style={StyleSheet.compose(\n        {\n          backgroundColor: pressed\n            ? backgroundColor.pressed\n            : backgroundColor.default,\n          ...Platform.select({\n            web: {\n              cursor: \"pointer\",\n            },\n          }),\n        },\n        props.style\n      )}\n    >\n      {props.children}\n    </View>\n  );\n\n  return props.onPress == null ? (\n    content\n  ) : (\n    <TouchableWithoutFeedback\n      hitSlop={props.hitSlop}\n      onPress={props.onPress}\n      onPressIn={() => setPressed(true)}\n      onPressOut={() => setPressed(false)}\n    >\n      {content}\n    </TouchableWithoutFeedback>\n  );\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}