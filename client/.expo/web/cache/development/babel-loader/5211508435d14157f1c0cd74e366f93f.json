{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.buildAsyncRequire = void 0;\n\nvar loadBundle_1 = require(\"./loadBundle\");\n\nfunction buildAsyncRequire() {\n  var cache = new Map();\n  return function () {\n    var _universal_loadBundleAsync = _asyncToGenerator(function* (path) {\n      if (cache.has(path)) {\n        return cache.get(path);\n      }\n\n      var promise = (0, loadBundle_1.loadBundleAsync)(path).catch(function (error) {\n        cache.delete(path);\n        throw error;\n      });\n      cache.set(path, promise);\n      return promise;\n    });\n\n    function universal_loadBundleAsync(_x) {\n      return _universal_loadBundleAsync.apply(this, arguments);\n    }\n\n    return universal_loadBundleAsync;\n  }();\n}\n\nexports.buildAsyncRequire = buildAsyncRequire;","map":{"version":3,"sources":["../../src/async-require/buildAsyncRequire.ts"],"names":[],"mappings":";;;;;;;;;AAOA,IAAA,YAAA,GAAA,OAAA,gBAAA;;AASA,SAAgB,iBAAhB,GAAiC;EAC/B,IAAM,KAAK,GAAG,IAAI,GAAJ,EAAd;EAEA;IAAA,mDAAO,WAAyC,IAAzC,EAAqD;MAC1D,IAAI,KAAK,CAAC,GAAN,CAAU,IAAV,CAAJ,EAAqB;QACnB,OAAO,KAAK,CAAC,GAAN,CAAU,IAAV,CAAP;MACD;;MAED,IAAM,OAAO,GAAG,CAAA,GAAA,YAAA,CAAA,eAAA,EAAgB,IAAhB,EAAsB,KAAtB,CAA4B,UAAC,KAAD,EAAU;QACpD,KAAK,CAAC,MAAN,CAAa,IAAb;QACA,MAAM,KAAN;MACD,CAHe,CAAhB;MAKA,KAAK,CAAC,GAAN,CAAU,IAAV,EAAgB,OAAhB;MAEA,OAAO,OAAP;IACD,CAbD;;IAAA,SAAsB,yBAAtB;MAAA;IAAA;;IAAA,OAAsB,yBAAtB;EAAA;AAcD;;AAjBD,OAAA,CAAA,iBAAA,GAAA,iBAAA","sourcesContent":["/**\n * Copyright Â© 2022 650 Industries.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { loadBundleAsync } from \"./loadBundle\";\n\n/**\n * Must satisfy the requirements of the Metro bundler.\n * https://github.com/react-native-community/discussions-and-proposals/blob/main/proposals/0605-lazy-bundling.md#__loadbundleasync-in-metro\n */\ntype AsyncRequire = (path: string) => Promise<void>;\n\n/** Create an `loadBundleAsync` function in the expected shape for Metro bundler. */\nexport function buildAsyncRequire(): AsyncRequire {\n  const cache = new Map<string, Promise<void>>();\n\n  return async function universal_loadBundleAsync(path: string): Promise<void> {\n    if (cache.has(path)) {\n      return cache.get(path)!;\n    }\n\n    const promise = loadBundleAsync(path).catch((error) => {\n      cache.delete(path);\n      throw error;\n    });\n\n    cache.set(path, promise);\n\n    return promise;\n  };\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}