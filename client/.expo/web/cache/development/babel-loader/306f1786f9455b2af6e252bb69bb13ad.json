{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar react_native_1 = require(\"react-native-web/dist/index\");\n\nvar LogBox;\n\nif (__DEV__) {\n  var LogBoxData = require(\"./Data/LogBoxData\");\n\n  var _require = require(\"./Data/parseLogBoxLog\"),\n      parseLogBoxLog = _require.parseLogBoxLog,\n      parseInterpolation = _require.parseInterpolation;\n\n  var originalConsoleError;\n  var consoleErrorImpl;\n  var isLogBoxInstalled = false;\n  LogBox = {\n    install: function install() {\n      if (isLogBoxInstalled) {\n        return;\n      }\n\n      isLogBoxInstalled = true;\n      var isFirstInstall = originalConsoleError == null;\n\n      if (isFirstInstall) {\n        originalConsoleError = console.error.bind(console);\n\n        console.error = function () {\n          consoleErrorImpl === null || consoleErrorImpl === void 0 ? void 0 : consoleErrorImpl.apply(void 0, arguments);\n        };\n      }\n\n      consoleErrorImpl = registerError;\n\n      if (react_native_1.Platform.isTesting) {\n        LogBoxData.setDisabled(true);\n      }\n    },\n    uninstall: function uninstall() {\n      if (!isLogBoxInstalled) {\n        return;\n      }\n\n      isLogBoxInstalled = false;\n      consoleErrorImpl = originalConsoleError;\n      delete console.disableLogBox;\n    },\n    isInstalled: function isInstalled() {\n      return isLogBoxInstalled;\n    },\n    ignoreLogs: function ignoreLogs(patterns) {\n      LogBoxData.addIgnorePatterns(patterns);\n    },\n    ignoreAllLogs: function ignoreAllLogs(value) {\n      LogBoxData.setDisabled(value == null ? true : value);\n    },\n    clearAllLogs: function clearAllLogs() {\n      LogBoxData.clear();\n    },\n    addLog: function addLog(log) {\n      if (isLogBoxInstalled) {\n        LogBoxData.addLog(log);\n      }\n    },\n    addException: function addException(error) {\n      if (isLogBoxInstalled) {\n        LogBoxData.addException(error);\n      }\n    }\n  };\n\n  var isWarningModuleWarning = function isWarningModuleWarning() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return typeof args[0] === \"string\" && args[0].startsWith(\"Warning: \");\n  };\n\n  var registerError = function registerError() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    if (LogBoxData.isLogBoxErrorMessage(args[0])) {\n      originalConsoleError === null || originalConsoleError === void 0 ? void 0 : originalConsoleError.apply(void 0, args);\n      return;\n    }\n\n    try {\n      if (!isWarningModuleWarning.apply(void 0, args)) {\n        originalConsoleError === null || originalConsoleError === void 0 ? void 0 : originalConsoleError.apply(void 0, args);\n        return;\n      }\n\n      var _parseLogBoxLog = parseLogBoxLog(args),\n          category = _parseLogBoxLog.category,\n          message = _parseLogBoxLog.message,\n          componentStack = _parseLogBoxLog.componentStack;\n\n      if (!LogBoxData.isMessageIgnored(message.content)) {\n        var interpolated = parseInterpolation(args);\n        originalConsoleError === null || originalConsoleError === void 0 ? void 0 : originalConsoleError(interpolated.message.content);\n        LogBoxData.addLog({\n          level: /did not match\\. Server:/.test(message.content) ? \"fatal\" : \"error\",\n          category: category,\n          message: message,\n          componentStack: componentStack\n        });\n      }\n    } catch (err) {\n      LogBoxData.reportUnexpectedLogBoxError(err);\n    }\n  };\n} else {\n  LogBox = {\n    install: function install() {},\n    uninstall: function uninstall() {},\n    isInstalled: function isInstalled() {\n      return false;\n    },\n    ignoreLogs: function ignoreLogs(patterns) {},\n    ignoreAllLogs: function ignoreAllLogs(value) {},\n    clearAllLogs: function clearAllLogs() {},\n    addLog: function addLog(log) {},\n    addException: function addException(ex) {}\n  };\n}\n\nmodule.exports = LogBox;\nexports.default = LogBox;","map":{"version":3,"sources":["../../src/error-overlay/LogBox.web.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Evan Bacon.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { Platform } from \"react-native\";\n\nimport { IgnorePattern, LogData } from \"./Data/LogBoxData\";\nimport { ExtendedExceptionData } from \"./Data/parseLogBoxLog\";\n\nexport { LogData, ExtendedExceptionData, IgnorePattern };\n\nlet LogBox: ILogBox;\n\ninterface ILogBox {\n  install(): void;\n  uninstall(): void;\n  isInstalled(): boolean;\n  ignoreLogs(patterns: readonly IgnorePattern[]): void;\n  ignoreAllLogs(ignore?: boolean): void;\n  clearAllLogs(): void;\n  addLog(log: LogData): void;\n  addException(error: ExtendedExceptionData): void;\n}\n\n/**\n * LogBox displays logs in the app.\n */\nif (__DEV__) {\n  const LogBoxData = require(\"./Data/LogBoxData\");\n  const { parseLogBoxLog, parseInterpolation } =\n    require(\"./Data/parseLogBoxLog\") as typeof import(\"./Data/parseLogBoxLog\");\n\n  let originalConsoleError: typeof console.error | undefined;\n  let consoleErrorImpl: typeof console.error | undefined;\n\n  let isLogBoxInstalled: boolean = false;\n\n  LogBox = {\n    install(): void {\n      if (isLogBoxInstalled) {\n        return;\n      }\n\n      isLogBoxInstalled = true;\n\n      // Trigger lazy initialization of module.\n      // require(\"../NativeModules/specs/NativeLogBox\");\n\n      // IMPORTANT: we only overwrite `console.error` and `console.warn` once.\n      // When we uninstall we keep the same reference and only change its\n      // internal implementation\n      const isFirstInstall = originalConsoleError == null;\n      if (isFirstInstall) {\n        originalConsoleError = console.error.bind(console);\n\n        console.error = (...args) => {\n          consoleErrorImpl?.(...args);\n        };\n      }\n\n      consoleErrorImpl = registerError;\n\n      if (Platform.isTesting) {\n        LogBoxData.setDisabled(true);\n      }\n    },\n\n    uninstall(): void {\n      if (!isLogBoxInstalled) {\n        return;\n      }\n\n      isLogBoxInstalled = false;\n\n      // IMPORTANT: we don't re-assign to `console` in case the method has been\n      // decorated again after installing LogBox. E.g.:\n      // Before uninstalling: original > LogBox > OtherErrorHandler\n      // After uninstalling:  original > LogBox (noop) > OtherErrorHandler\n      consoleErrorImpl = originalConsoleError;\n      delete (console as any).disableLogBox;\n    },\n\n    isInstalled(): boolean {\n      return isLogBoxInstalled;\n    },\n\n    ignoreLogs(patterns: readonly IgnorePattern[]): void {\n      LogBoxData.addIgnorePatterns(patterns);\n    },\n\n    ignoreAllLogs(value?: boolean): void {\n      LogBoxData.setDisabled(value == null ? true : value);\n    },\n\n    clearAllLogs(): void {\n      LogBoxData.clear();\n    },\n\n    addLog(log: LogData): void {\n      if (isLogBoxInstalled) {\n        LogBoxData.addLog(log);\n      }\n    },\n\n    addException(error: ExtendedExceptionData): void {\n      if (isLogBoxInstalled) {\n        LogBoxData.addException(error);\n      }\n    },\n  };\n\n  const isWarningModuleWarning = (...args: any) => {\n    return typeof args[0] === \"string\" && args[0].startsWith(\"Warning: \");\n  };\n\n  const registerError = (...args: Parameters<typeof console.error>): void => {\n    // Let errors within LogBox itself fall through.\n    if (LogBoxData.isLogBoxErrorMessage(args[0])) {\n      originalConsoleError?.(...args);\n      return;\n    }\n\n    try {\n      if (!isWarningModuleWarning(...args)) {\n        // Only show LogBox for the 'warning' module, otherwise pass through.\n        // By passing through, this will get picked up by the React console override,\n        // potentially adding the component stack. React then passes it back to the\n        // React Native ExceptionsManager, which reports it to LogBox as an error.\n        //\n        // The 'warning' module needs to be handled here because React internally calls\n        // `console.error('Warning: ')` with the component stack already included.\n        originalConsoleError?.(...args);\n        return;\n      }\n\n      const { category, message, componentStack } = parseLogBoxLog(args);\n\n      if (!LogBoxData.isMessageIgnored(message.content)) {\n        // Interpolate the message so they are formatted for adb and other CLIs.\n        // This is different than the message.content above because it includes component stacks.\n        const interpolated = parseInterpolation(args);\n        originalConsoleError?.(interpolated.message.content);\n\n        LogBoxData.addLog({\n          // Always show the static rendering issues as full screen since they\n          // are too confusing otherwise.\n          level: /did not match\\. Server:/.test(message.content)\n            ? \"fatal\"\n            : \"error\",\n          category,\n          message,\n          componentStack,\n        });\n      }\n    } catch (err) {\n      LogBoxData.reportUnexpectedLogBoxError(err);\n    }\n  };\n} else {\n  LogBox = {\n    install(): void {},\n    uninstall(): void {},\n    isInstalled(): boolean {\n      return false;\n    },\n    ignoreLogs(patterns: readonly IgnorePattern[]): void {},\n    ignoreAllLogs(value?: boolean): void {},\n    clearAllLogs(): void {},\n    addLog(log: LogData): void {},\n    addException(ex: ExtendedExceptionData): void {},\n  };\n}\n\nmodule.exports = LogBox;\n\nexport default LogBox;\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}