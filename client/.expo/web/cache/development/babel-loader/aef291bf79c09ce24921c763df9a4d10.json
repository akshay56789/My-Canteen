{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"@babel/runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nfunction symbolicateStackTrace(_x) {\n  return _symbolicateStackTrace.apply(this, arguments);\n}\n\nfunction _symbolicateStackTrace() {\n  _symbolicateStackTrace = _asyncToGenerator(function* (stack) {\n    var baseUrl = typeof window === \"undefined\" ? process.env.EXPO_DEV_SERVER_ORIGIN : window.location.protocol + \"//\" + window.location.host;\n    var response = yield fetch(baseUrl + \"/symbolicate\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        stack: stack\n      })\n    });\n    return yield response.json();\n  });\n  return _symbolicateStackTrace.apply(this, arguments);\n}\n\nexports.default = symbolicateStackTrace;","map":{"version":3,"sources":["../../../../src/error-overlay/modules/symbolicateStackTrace/index.ts"],"names":[],"mappings":";;;;;;;;SAyBe,qB;;;;;6CAAf,WACE,KADF,EACqB;IAEnB,IAAM,OAAO,GACX,OAAO,MAAP,KAAkB,WAAlB,GACI,OAAO,CAAC,GAAR,CAAY,sBADhB,GAEI,MAAM,CAAC,QAAP,CAAgB,QAAhB,GAA2B,IAA3B,GAAkC,MAAM,CAAC,QAAP,CAAgB,IAHxD;IAKA,IAAM,QAAQ,SAAS,KAAK,CAAC,OAAO,GAAG,cAAX,EAA2B;MACrD,MAAM,EAAE,MAD6C;MAErD,IAAI,EAAE,IAAI,CAAC,SAAL,CAAe;QAAE,KAAK,EAAL;MAAF,CAAf;IAF+C,CAA3B,CAA5B;IAIA,aAAa,QAAQ,CAAC,IAAT,EAAb;EACD,C;;;;AAED,OAAA,CAAA,OAAA,GAAe,qBAAf","sourcesContent":["/**\n * Copyright (c) Evan Bacon.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { StackFrame } from \"stacktrace-parser\";\n\nexport type CodeFrame = {\n  content: string;\n  location?: {\n    row: number;\n    column: number;\n    [key: string]: any;\n  };\n  fileName: string;\n};\n\nexport type SymbolicatedStackTrace = {\n  stack: StackFrame[];\n  codeFrame?: CodeFrame;\n};\n\nasync function symbolicateStackTrace(\n  stack: StackFrame[]\n): Promise<SymbolicatedStackTrace> {\n  const baseUrl =\n    typeof window === \"undefined\"\n      ? process.env.EXPO_DEV_SERVER_ORIGIN\n      : window.location.protocol + \"//\" + window.location.host;\n\n  const response = await fetch(baseUrl + \"/symbolicate\", {\n    method: \"POST\",\n    body: JSON.stringify({ stack }),\n  });\n  return await response.json();\n}\n\nexport default symbolicateStackTrace;\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}