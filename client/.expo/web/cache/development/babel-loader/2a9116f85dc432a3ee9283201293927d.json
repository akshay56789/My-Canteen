{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"@babel/runtime/helpers/slicedToArray\");\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LogBoxInspectorSourceMapStatus = void 0;\n\nvar react_1 = __importStar(require(\"react\"));\n\nvar react_native_1 = require(\"react-native-web/dist/index\");\n\nvar LogBoxButton_1 = require(\"../UI/LogBoxButton\");\n\nvar LogBoxStyle = __importStar(require(\"../UI/LogBoxStyle\"));\n\nfunction LogBoxInspectorSourceMapStatus(props) {\n  var _ref = (0, react_1.useState)({\n    animation: null,\n    rotate: null\n  }),\n      _ref2 = _slicedToArray(_ref, 2),\n      state = _ref2[0],\n      setState = _ref2[1];\n\n  (0, react_1.useEffect)(function () {\n    if (props.status === \"PENDING\") {\n      if (state.animation == null) {\n        var animated = new react_native_1.Animated.Value(0);\n        var animation = react_native_1.Animated.loop(react_native_1.Animated.timing(animated, {\n          duration: 2000,\n          easing: react_native_1.Easing.linear,\n          toValue: 1,\n          useNativeDriver: true\n        }));\n        setState({\n          animation: animation,\n          rotate: animated.interpolate({\n            inputRange: [0, 1],\n            outputRange: [\"0deg\", \"360deg\"]\n          })\n        });\n        animation.start();\n      }\n    } else {\n      if (state.animation != null) {\n        state.animation.stop();\n        setState({\n          animation: null,\n          rotate: null\n        });\n      }\n    }\n\n    return function () {\n      if (state.animation != null) {\n        state.animation.stop();\n      }\n    };\n  }, [props.status, state.animation]);\n  var image;\n  var color;\n\n  switch (props.status) {\n    case \"FAILED\":\n      image = require(\"@expo/metro-runtime/assets/alert-triangle.png\");\n      color = LogBoxStyle.getErrorColor(1);\n      break;\n\n    case \"PENDING\":\n      image = require(\"@expo/metro-runtime/assets/loader.png\");\n      color = LogBoxStyle.getWarningColor(1);\n      break;\n  }\n\n  if (props.status === \"COMPLETE\" || image == null) {\n    return null;\n  }\n\n  return react_1.default.createElement(LogBoxButton_1.LogBoxButton, {\n    backgroundColor: {\n      default: \"transparent\",\n      pressed: LogBoxStyle.getBackgroundColor(1)\n    },\n    hitSlop: {\n      bottom: 8,\n      left: 8,\n      right: 8,\n      top: 8\n    },\n    onPress: props.onPress,\n    style: styles.root\n  }, react_1.default.createElement(react_native_1.Animated.Image, {\n    source: image,\n    style: [styles.image, {\n      tintColor: color\n    }, state.rotate == null || props.status !== \"PENDING\" ? null : {\n      transform: [{\n        rotate: state.rotate\n      }]\n    }]\n  }), react_1.default.createElement(react_native_1.Text, {\n    style: [styles.text, {\n      color: color\n    }]\n  }, \"Source Map\"));\n}\n\nexports.LogBoxInspectorSourceMapStatus = LogBoxInspectorSourceMapStatus;\nvar styles = react_native_1.StyleSheet.create({\n  root: {\n    alignItems: \"center\",\n    borderRadius: 12,\n    flexDirection: \"row\",\n    height: 24,\n    paddingHorizontal: 8\n  },\n  image: {\n    height: 14,\n    width: 16,\n    marginEnd: 4,\n    tintColor: LogBoxStyle.getTextColor(0.4)\n  },\n  text: {\n    fontSize: 12,\n    includeFontPadding: false,\n    lineHeight: 16\n  }\n});","map":{"version":3,"sources":["../../../src/error-overlay/overlay/LogBoxInspectorSourceMapStatus.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Evan Bacon.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React, { useEffect, useState } from \"react\";\nimport {\n  Animated,\n  Easing,\n  GestureResponderEvent,\n  StyleSheet,\n  Text,\n} from \"react-native\";\n\nimport { LogBoxButton } from \"../UI/LogBoxButton\";\nimport * as LogBoxStyle from \"../UI/LogBoxStyle\";\n\ntype Props = {\n  onPress?: ((event: GestureResponderEvent) => void) | null;\n  status: \"COMPLETE\" | \"FAILED\" | \"NONE\" | \"PENDING\";\n};\n\nexport function LogBoxInspectorSourceMapStatus(props: Props) {\n  const [state, setState] = useState<{\n    animation: null | Animated.CompositeAnimation;\n    rotate: null | Animated.AnimatedInterpolation<string>;\n  }>({\n    animation: null,\n    rotate: null,\n  });\n\n  useEffect(() => {\n    if (props.status === \"PENDING\") {\n      if (state.animation == null) {\n        const animated = new Animated.Value(0);\n        const animation = Animated.loop(\n          Animated.timing(animated, {\n            duration: 2000,\n            easing: Easing.linear,\n            toValue: 1,\n            useNativeDriver: true,\n          })\n        );\n        setState({\n          animation,\n          rotate: animated.interpolate({\n            inputRange: [0, 1],\n            outputRange: [\"0deg\", \"360deg\"],\n          }),\n        });\n        animation.start();\n      }\n    } else {\n      if (state.animation != null) {\n        state.animation.stop();\n        setState({\n          animation: null,\n          rotate: null,\n        });\n      }\n    }\n\n    return () => {\n      if (state.animation != null) {\n        state.animation.stop();\n      }\n    };\n  }, [props.status, state.animation]);\n\n  let image;\n  let color;\n  switch (props.status) {\n    case \"FAILED\":\n      image = require(\"@expo/metro-runtime/assets/alert-triangle.png\");\n      color = LogBoxStyle.getErrorColor(1);\n      break;\n    case \"PENDING\":\n      image = require(\"@expo/metro-runtime/assets/loader.png\");\n      color = LogBoxStyle.getWarningColor(1);\n      break;\n  }\n\n  if (props.status === \"COMPLETE\" || image == null) {\n    return null;\n  }\n\n  return (\n    <LogBoxButton\n      backgroundColor={{\n        default: \"transparent\",\n        pressed: LogBoxStyle.getBackgroundColor(1),\n      }}\n      hitSlop={{ bottom: 8, left: 8, right: 8, top: 8 }}\n      onPress={props.onPress}\n      style={styles.root}\n    >\n      <Animated.Image\n        source={image}\n        style={[\n          styles.image,\n          { tintColor: color },\n          state.rotate == null || props.status !== \"PENDING\"\n            ? null\n            : { transform: [{ rotate: state.rotate }] },\n        ]}\n      />\n      <Text style={[styles.text, { color }]}>Source Map</Text>\n    </LogBoxButton>\n  );\n}\n\nconst styles = StyleSheet.create({\n  root: {\n    alignItems: \"center\",\n    borderRadius: 12,\n    flexDirection: \"row\",\n    height: 24,\n    paddingHorizontal: 8,\n  },\n  image: {\n    height: 14,\n    width: 16,\n    marginEnd: 4,\n    tintColor: LogBoxStyle.getTextColor(0.4),\n  },\n  text: {\n    fontSize: 12,\n    includeFontPadding: false,\n    lineHeight: 16,\n  },\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}