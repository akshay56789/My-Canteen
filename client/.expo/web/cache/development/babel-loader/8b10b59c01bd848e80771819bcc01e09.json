{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.symbolicate = exports.deleteStack = void 0;\n\nvar symbolicateStackTrace_1 = __importDefault(require(\"../modules/symbolicateStackTrace\"));\n\nvar cache = new Map();\n\nvar sanitize = function sanitize(_ref) {\n  var maybeStack = _ref.stack,\n      codeFrame = _ref.codeFrame;\n\n  if (!Array.isArray(maybeStack)) {\n    throw new Error(\"Expected stack to be an array.\");\n  }\n\n  var stack = [];\n\n  for (var maybeFrame of maybeStack) {\n    var collapse = false;\n\n    if (\"collapse\" in maybeFrame) {\n      if (typeof maybeFrame.collapse !== \"boolean\") {\n        throw new Error(\"Expected stack frame `collapse` to be a boolean.\");\n      }\n\n      collapse = maybeFrame.collapse;\n    }\n\n    stack.push({\n      arguments: [],\n      column: maybeFrame.column,\n      file: maybeFrame.file,\n      lineNumber: maybeFrame.lineNumber,\n      methodName: maybeFrame.methodName,\n      collapse: collapse\n    });\n  }\n\n  return {\n    stack: stack,\n    codeFrame: codeFrame\n  };\n};\n\nfunction deleteStack(stack) {\n  cache.delete(stack);\n}\n\nexports.deleteStack = deleteStack;\n\nfunction symbolicate(stack) {\n  var promise = cache.get(stack);\n\n  if (promise == null) {\n    promise = (0, symbolicateStackTrace_1.default)(stack).then(sanitize);\n    cache.set(stack, promise);\n  }\n\n  return promise;\n}\n\nexports.symbolicate = symbolicate;","map":{"version":3,"sources":["../../../src/error-overlay/Data/LogBoxSymbolication.tsx"],"names":[],"mappings":";;;;;;;;;;;;;AAUA,IAAA,uBAAA,GAAA,eAAA,CAAA,OAAA,oCAAA,CAAA;;AAQA,IAAM,KAAK,GAAgD,IAAI,GAAJ,EAA3D;;AAKA,IAAM,QAAQ,GAAG,SAAX,QAAW,OAGoC;EAAA,IAF5C,UAE4C,QAFnD,KAEmD;EAAA,IADnD,SACmD,QADnD,SACmD;;EACnD,IAAI,CAAC,KAAK,CAAC,OAAN,CAAc,UAAd,CAAL,EAAgC;IAC9B,MAAM,IAAI,KAAJ,CAAU,gCAAV,CAAN;EACD;;EACD,IAAM,KAAK,GAAiB,EAA5B;;EACA,KAAK,IAAM,UAAX,IAAyB,UAAzB,EAAqC;IACnC,IAAI,QAAQ,GAAG,KAAf;;IACA,IAAI,cAAc,UAAlB,EAA8B;MAC5B,IAAI,OAAO,UAAU,CAAC,QAAlB,KAA+B,SAAnC,EAA8C;QAC5C,MAAM,IAAI,KAAJ,CAAU,kDAAV,CAAN;MACD;;MACD,QAAQ,GAAG,UAAU,CAAC,QAAtB;IACD;;IACD,KAAK,CAAC,IAAN,CAAW;MACT,SAAS,EAAE,EADF;MAET,MAAM,EAAE,UAAU,CAAC,MAFV;MAGT,IAAI,EAAE,UAAU,CAAC,IAHR;MAIT,UAAU,EAAE,UAAU,CAAC,UAJd;MAKT,UAAU,EAAE,UAAU,CAAC,UALd;MAMT,QAAQ,EAAR;IANS,CAAX;EAQD;;EACD,OAAO;IAAE,KAAK,EAAL,KAAF;IAAS,SAAS,EAAT;EAAT,CAAP;AACD,CA1BD;;AA4BA,SAAgB,WAAhB,CAA4B,KAA5B,EAAwC;EACtC,KAAK,CAAC,MAAN,CAAa,KAAb;AACD;;AAFD,OAAA,CAAA,WAAA,GAAA,WAAA;;AAIA,SAAgB,WAAhB,CAA4B,KAA5B,EAAwC;EACtC,IAAI,OAAO,GAAG,KAAK,CAAC,GAAN,CAAU,KAAV,CAAd;;EACA,IAAI,OAAO,IAAI,IAAf,EAAqB;IACnB,OAAO,GAAG,CAAA,GAAA,uBAAA,CAAA,OAAA,EAAsB,KAAtB,EAA6B,IAA7B,CAAkC,QAAlC,CAAV;IACA,KAAK,CAAC,GAAN,CAAU,KAAV,EAAiB,OAAjB;EACD;;EAED,OAAO,OAAP;AACD;;AARD,OAAA,CAAA,WAAA,GAAA,WAAA","sourcesContent":["/**\n * Copyright (c) Evan Bacon.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport { StackFrame as UpstreamStackFrame } from \"stacktrace-parser\";\n\nimport symbolicateStackTrace from \"../modules/symbolicateStackTrace\";\n\ntype SymbolicatedStackTrace = any;\n\ntype StackFrame = UpstreamStackFrame & { collapse?: boolean };\n\nexport type Stack = StackFrame[];\n\nconst cache: Map<Stack, Promise<SymbolicatedStackTrace>> = new Map();\n\n/**\n * Sanitize because sometimes, `symbolicateStackTrace` gives us invalid values.\n */\nconst sanitize = ({\n  stack: maybeStack,\n  codeFrame,\n}: SymbolicatedStackTrace): SymbolicatedStackTrace => {\n  if (!Array.isArray(maybeStack)) {\n    throw new Error(\"Expected stack to be an array.\");\n  }\n  const stack: StackFrame[] = [];\n  for (const maybeFrame of maybeStack) {\n    let collapse = false;\n    if (\"collapse\" in maybeFrame) {\n      if (typeof maybeFrame.collapse !== \"boolean\") {\n        throw new Error(\"Expected stack frame `collapse` to be a boolean.\");\n      }\n      collapse = maybeFrame.collapse;\n    }\n    stack.push({\n      arguments: [],\n      column: maybeFrame.column,\n      file: maybeFrame.file,\n      lineNumber: maybeFrame.lineNumber,\n      methodName: maybeFrame.methodName,\n      collapse,\n    });\n  }\n  return { stack, codeFrame };\n};\n\nexport function deleteStack(stack: Stack): void {\n  cache.delete(stack);\n}\n\nexport function symbolicate(stack: Stack): Promise<SymbolicatedStackTrace> {\n  let promise = cache.get(stack);\n  if (promise == null) {\n    promise = symbolicateStackTrace(stack).then(sanitize);\n    cache.set(stack, promise);\n  }\n\n  return promise;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}