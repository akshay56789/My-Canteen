{"ast":null,"code":"\"use strict\";\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useSelectedLog = exports.useLogs = exports.LogContext = void 0;\n\nvar react_1 = __importDefault(require(\"react\"));\n\nvar react_native_1 = require(\"react-native-web/dist/index\");\n\nvar LogBoxLog_1 = require(\"./LogBoxLog\");\n\nexports.LogContext = react_1.default.createContext(null);\n\nfunction useLogs() {\n  var logs = react_1.default.useContext(exports.LogContext);\n\n  if (!logs) {\n    if (react_native_1.Platform.OS === \"web\" && typeof window !== \"undefined\") {\n      var expoCliStaticErrorElement = document.getElementById(\"_expo-static-error\");\n\n      if (expoCliStaticErrorElement === null || expoCliStaticErrorElement === void 0 ? void 0 : expoCliStaticErrorElement.textContent) {\n        var raw = JSON.parse(expoCliStaticErrorElement.textContent);\n        return _objectSpread(_objectSpread({}, raw), {}, {\n          logs: raw.logs.map(function (raw) {\n            return new LogBoxLog_1.LogBoxLog(raw);\n          })\n        });\n      }\n    }\n\n    throw new Error(\"useLogs must be used within a LogProvider\");\n  }\n\n  return logs;\n}\n\nexports.useLogs = useLogs;\n\nfunction useSelectedLog() {\n  var _useLogs = useLogs(),\n      selectedLogIndex = _useLogs.selectedLogIndex,\n      logs = _useLogs.logs;\n\n  return logs[selectedLogIndex];\n}\n\nexports.useSelectedLog = useSelectedLog;","map":{"version":3,"sources":["../../../src/error-overlay/Data/LogContext.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,IAAA,OAAA,GAAA,eAAA,CAAA,OAAA,CAAA,OAAA,CAAA,CAAA;;;;AAGA,IAAA,WAAA,GAAA,OAAA,eAAA;;AAIa,OAAA,CAAA,UAAA,GAAa,OAAA,CAAA,OAAA,CAAM,aAAN,CAIhB,IAJgB,CAAb;;AAMb,SAAgB,OAAhB,GAAuB;EAKrB,IAAM,IAAI,GAAG,OAAA,CAAA,OAAA,CAAM,UAAN,CAAiB,OAAA,CAAA,UAAjB,CAAb;;EACA,IAAI,CAAC,IAAL,EAAW;IACT,IAAI,cAAA,CAAA,QAAA,CAAS,EAAT,KAAgB,KAAhB,IAAyB,OAAO,MAAP,KAAkB,WAA/C,EAA4D;MAE1D,IAAM,yBAAyB,GAC7B,QAAQ,CAAC,cAAT,CAAwB,oBAAxB,CADF;;MAEA,IAAI,yBAAyB,KAAA,IAAzB,IAAA,yBAAyB,KAAA,KAAA,CAAzB,GAAyB,KAAA,CAAzB,GAAA,yBAAyB,CAAE,WAA/B,EAA4C;QAC1C,IAAM,GAAG,GAAG,IAAI,CAAC,KAAL,CAAW,yBAAyB,CAAC,WAArC,CAAZ;QACA,uCACK,GADL;UAEE,IAAI,EAAE,GAAG,CAAC,IAAJ,CAAS,GAAT,CAAa,UAAC,GAAD;YAAA,OAAc,IAAI,WAAA,CAAA,SAAJ,CAAc,GAAd,CAAd;UAAA,CAAb;QAFR;MAID;IACF;;IAED,MAAM,IAAI,KAAJ,CAAU,2CAAV,CAAN;EACD;;EACD,OAAO,IAAP;AACD;;AAvBD,OAAA,CAAA,OAAA,GAAA,OAAA;;AAyBA,SAAgB,cAAhB,GAA8B;EAC5B,eAAmC,OAAO,EAA1C;EAAA,IAAQ,gBAAR,YAAQ,gBAAR;EAAA,IAA0B,IAA1B,YAA0B,IAA1B;;EACA,OAAO,IAAI,CAAC,gBAAD,CAAX;AACD;;AAHD,OAAA,CAAA,cAAA,GAAA,cAAA","sourcesContent":["import React from \"react\";\nimport { Platform } from \"react-native\";\n\nimport { LogBoxLog } from \"./LogBoxLog\";\n\n// Context provider for Array<LogBoxLog>\n\nexport const LogContext = React.createContext<{\n  selectedLogIndex: number;\n  isDisabled: boolean;\n  logs: LogBoxLog[];\n} | null>(null);\n\nexport function useLogs(): {\n  selectedLogIndex: number;\n  isDisabled: boolean;\n  logs: LogBoxLog[];\n} {\n  const logs = React.useContext(LogContext);\n  if (!logs) {\n    if (Platform.OS === \"web\" && typeof window !== \"undefined\") {\n      // Logbox data that is pre-fetched on the dev server and rendered here.\n      const expoCliStaticErrorElement =\n        document.getElementById(\"_expo-static-error\");\n      if (expoCliStaticErrorElement?.textContent) {\n        const raw = JSON.parse(expoCliStaticErrorElement.textContent);\n        return {\n          ...raw,\n          logs: raw.logs.map((raw: any) => new LogBoxLog(raw)),\n        };\n      }\n    }\n\n    throw new Error(\"useLogs must be used within a LogProvider\");\n  }\n  return logs;\n}\n\nexport function useSelectedLog() {\n  const { selectedLogIndex, logs } = useLogs();\n  return logs[selectedLogIndex];\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}