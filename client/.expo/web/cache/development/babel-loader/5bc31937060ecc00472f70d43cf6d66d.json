{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Ansi = void 0;\n\nvar anser_1 = __importDefault(require(\"anser\"));\n\nvar react_1 = __importDefault(require(\"react\"));\n\nvar react_native_1 = require(\"react-native-web/dist/index\");\n\nvar COLORS = {\n  \"ansi-black\": \"rgb(27, 27, 27)\",\n  \"ansi-red\": \"rgb(187, 86, 83)\",\n  \"ansi-green\": \"rgb(144, 157, 98)\",\n  \"ansi-yellow\": \"rgb(234, 193, 121)\",\n  \"ansi-blue\": \"rgb(125, 169, 199)\",\n  \"ansi-magenta\": \"rgb(176, 101, 151)\",\n  \"ansi-cyan\": \"rgb(140, 220, 216)\",\n  \"ansi-bright-black\": \"rgb(98, 98, 98)\",\n  \"ansi-bright-red\": \"rgb(187, 86, 83)\",\n  \"ansi-bright-green\": \"rgb(144, 157, 98)\",\n  \"ansi-bright-yellow\": \"rgb(234, 193, 121)\",\n  \"ansi-bright-blue\": \"rgb(125, 169, 199)\",\n  \"ansi-bright-magenta\": \"rgb(176, 101, 151)\",\n  \"ansi-bright-cyan\": \"rgb(140, 220, 216)\",\n  \"ansi-bright-white\": \"rgb(247, 247, 247)\"\n};\n\nfunction Ansi(_ref) {\n  var text = _ref.text,\n      style = _ref.style;\n  var commonWhitespaceLength = Infinity;\n  var parsedLines = text.split(/\\n/).map(function (line) {\n    return anser_1.default.ansiToJson(line, {\n      json: true,\n      remove_empty: true,\n      use_classes: true\n    });\n  });\n  parsedLines.map(function (lines) {\n    var _a, _b, _c;\n\n    var match = lines[2] && ((_b = (_a = lines[2]) === null || _a === void 0 ? void 0 : _a.content) === null || _b === void 0 ? void 0 : _b.match(/^ +/));\n    var whitespaceLength = match && ((_c = match[0]) === null || _c === void 0 ? void 0 : _c.length) || 0;\n\n    if (whitespaceLength < commonWhitespaceLength) {\n      commonWhitespaceLength = whitespaceLength;\n    }\n  });\n\n  var getText = function getText(content, key) {\n    if (key === 1) {\n      return content.replace(/\\| $/, \" \");\n    } else if (key === 2 && commonWhitespaceLength < Infinity) {\n      return content.substr(commonWhitespaceLength);\n    } else {\n      return content;\n    }\n  };\n\n  return react_1.default.createElement(react_native_1.View, null, parsedLines.map(function (items, i) {\n    return react_1.default.createElement(react_native_1.View, {\n      style: styles.line,\n      key: i\n    }, items.map(function (bundle, key) {\n      var textStyle = bundle.fg && COLORS[bundle.fg] ? {\n        backgroundColor: bundle.bg && COLORS[bundle.bg],\n        color: bundle.fg && COLORS[bundle.fg]\n      } : {\n        backgroundColor: bundle.bg && COLORS[bundle.bg]\n      };\n      return react_1.default.createElement(react_native_1.Text, {\n        style: [style, textStyle],\n        key: key\n      }, getText(bundle.content, key));\n    }));\n  }));\n}\n\nexports.Ansi = Ansi;\nvar styles = react_native_1.StyleSheet.create({\n  line: {\n    flexDirection: \"row\"\n  }\n});","map":{"version":3,"sources":["../../../src/error-overlay/UI/AnsiHighlight.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Evan Bacon.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport Anser from \"anser\";\nimport React from \"react\";\nimport { StyleProp, StyleSheet, Text, TextStyle, View } from \"react-native\";\n\n// Afterglow theme from https://iterm2colorschemes.com/\nconst COLORS: Record<string, string> = {\n  \"ansi-black\": \"rgb(27, 27, 27)\",\n  \"ansi-red\": \"rgb(187, 86, 83)\",\n  \"ansi-green\": \"rgb(144, 157, 98)\",\n  \"ansi-yellow\": \"rgb(234, 193, 121)\",\n  \"ansi-blue\": \"rgb(125, 169, 199)\",\n  \"ansi-magenta\": \"rgb(176, 101, 151)\",\n  \"ansi-cyan\": \"rgb(140, 220, 216)\",\n  // Instead of white, use the default color provided to the component\n  // 'ansi-white': 'rgb(216, 216, 216)',\n  \"ansi-bright-black\": \"rgb(98, 98, 98)\",\n  \"ansi-bright-red\": \"rgb(187, 86, 83)\",\n  \"ansi-bright-green\": \"rgb(144, 157, 98)\",\n  \"ansi-bright-yellow\": \"rgb(234, 193, 121)\",\n  \"ansi-bright-blue\": \"rgb(125, 169, 199)\",\n  \"ansi-bright-magenta\": \"rgb(176, 101, 151)\",\n  \"ansi-bright-cyan\": \"rgb(140, 220, 216)\",\n  \"ansi-bright-white\": \"rgb(247, 247, 247)\",\n};\n\nexport function Ansi({\n  text,\n  style,\n}: {\n  text: string;\n  style: StyleProp<TextStyle>;\n}) {\n  let commonWhitespaceLength = Infinity;\n  const parsedLines = text.split(/\\n/).map((line) =>\n    Anser.ansiToJson(line, {\n      json: true,\n      remove_empty: true,\n      use_classes: true,\n    })\n  );\n\n  parsedLines.map((lines) => {\n    // The third item on each line includes the whitespace of the source code.\n    // We are looking for the least amount of common whitespace to trim all lines.\n    // Example: Array [\" \", \" 96 |\", \"     text\", ...]\n    const match = lines[2] && lines[2]?.content?.match(/^ +/);\n    const whitespaceLength = (match && match[0]?.length) || 0;\n    if (whitespaceLength < commonWhitespaceLength) {\n      commonWhitespaceLength = whitespaceLength;\n    }\n  });\n\n  const getText = (content: string, key: number) => {\n    if (key === 1) {\n      // Remove the vertical bar after line numbers\n      return content.replace(/\\| $/, \" \");\n    } else if (key === 2 && commonWhitespaceLength < Infinity) {\n      // Remove common whitespace at the beginning of the line\n      return content.substr(commonWhitespaceLength);\n    } else {\n      return content;\n    }\n  };\n\n  return (\n    <View>\n      {parsedLines.map((items, i) => (\n        <View style={styles.line} key={i}>\n          {items.map((bundle, key) => {\n            const textStyle =\n              bundle.fg && COLORS[bundle.fg]\n                ? {\n                    backgroundColor: bundle.bg && COLORS[bundle.bg],\n                    color: bundle.fg && COLORS[bundle.fg],\n                  }\n                : {\n                    backgroundColor: bundle.bg && COLORS[bundle.bg],\n                  };\n            return (\n              <Text style={[style, textStyle]} key={key}>\n                {getText(bundle.content, key)}\n              </Text>\n            );\n          })}\n        </View>\n      ))}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  line: {\n    flexDirection: \"row\",\n  },\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}