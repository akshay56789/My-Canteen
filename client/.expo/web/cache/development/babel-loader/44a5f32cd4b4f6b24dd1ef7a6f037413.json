{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function get() {\n        return m[k];\n      }\n    };\n  }\n\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n\n  __setModuleDefault(result, mod);\n\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.LogBoxInspectorStackFrame = void 0;\n\nvar react_1 = __importDefault(require(\"react\"));\n\nvar react_native_1 = require(\"react-native-web/dist/index\");\n\nvar LogBoxButton_1 = require(\"../UI/LogBoxButton\");\n\nvar LogBoxStyle = __importStar(require(\"../UI/LogBoxStyle\"));\n\nvar constants_1 = require(\"../UI/constants\");\n\nvar formatProjectFilePath_1 = require(\"../formatProjectFilePath\");\n\nfunction LogBoxInspectorStackFrame(props) {\n  var frame = props.frame,\n      onPress = props.onPress;\n  var location = (0, formatProjectFilePath_1.getStackFormattedLocation)(\"C:\\\\Users\\\\hello\\\\OneDrive\\\\Desktop\\\\React-native\\\\canteen-project\\\\client\", frame);\n  return react_1.default.createElement(react_native_1.View, {\n    style: styles.frameContainer\n  }, react_1.default.createElement(LogBoxButton_1.LogBoxButton, {\n    backgroundColor: {\n      default: \"transparent\",\n      pressed: onPress ? LogBoxStyle.getBackgroundColor(1) : \"transparent\"\n    },\n    onPress: onPress,\n    style: styles.frame\n  }, react_1.default.createElement(react_native_1.Text, {\n    style: [styles.name, frame.collapse === true && styles.dim]\n  }, frame.methodName), react_1.default.createElement(react_native_1.Text, {\n    ellipsizeMode: \"middle\",\n    numberOfLines: 1,\n    style: [styles.location, frame.collapse === true && styles.dim]\n  }, location)));\n}\n\nexports.LogBoxInspectorStackFrame = LogBoxInspectorStackFrame;\nvar styles = react_native_1.StyleSheet.create({\n  frameContainer: {\n    flexDirection: \"row\",\n    paddingHorizontal: 15\n  },\n  frame: {\n    flex: 1,\n    paddingVertical: 4,\n    paddingHorizontal: 10,\n    borderRadius: 5\n  },\n  lineLocation: {\n    flexDirection: \"row\"\n  },\n  name: {\n    color: LogBoxStyle.getTextColor(1),\n    fontSize: 14,\n    includeFontPadding: false,\n    lineHeight: 18,\n    fontWeight: \"400\",\n    fontFamily: constants_1.CODE_FONT\n  },\n  location: {\n    color: LogBoxStyle.getTextColor(0.8),\n    fontSize: 12,\n    fontWeight: \"300\",\n    includeFontPadding: false,\n    lineHeight: 16,\n    paddingLeft: 10\n  },\n  dim: {\n    color: LogBoxStyle.getTextColor(0.4),\n    fontWeight: \"300\"\n  },\n  line: {\n    color: LogBoxStyle.getTextColor(0.8),\n    fontSize: 12,\n    fontWeight: \"300\",\n    includeFontPadding: false,\n    lineHeight: 16\n  }\n});","map":{"version":3,"sources":["../../../src/error-overlay/overlay/LogBoxInspectorStackFrame.tsx"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Evan Bacon.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nimport React from \"react\";\nimport { GestureResponderEvent, StyleSheet, Text, View } from \"react-native\";\nimport { StackFrame } from \"stacktrace-parser\";\n\nimport { LogBoxButton } from \"../UI/LogBoxButton\";\nimport * as LogBoxStyle from \"../UI/LogBoxStyle\";\nimport { CODE_FONT } from \"../UI/constants\";\nimport { getStackFormattedLocation } from \"../formatProjectFilePath\";\n\ndeclare const process: any;\n\ntype Props = {\n  frame: StackFrame & { collapse?: boolean };\n  onPress?: (event: GestureResponderEvent) => void;\n};\n\nexport function LogBoxInspectorStackFrame(props: Props) {\n  const { frame, onPress } = props;\n  const location = getStackFormattedLocation(\n    process.env.EXPO_PROJECT_ROOT,\n    frame\n  );\n  return (\n    <View style={styles.frameContainer}>\n      <LogBoxButton\n        backgroundColor={{\n          default: \"transparent\",\n          pressed: onPress ? LogBoxStyle.getBackgroundColor(1) : \"transparent\",\n        }}\n        onPress={onPress}\n        style={styles.frame}\n      >\n        <Text style={[styles.name, frame.collapse === true && styles.dim]}>\n          {frame.methodName}\n        </Text>\n        <Text\n          ellipsizeMode=\"middle\"\n          numberOfLines={1}\n          style={[styles.location, frame.collapse === true && styles.dim]}\n        >\n          {location}\n        </Text>\n      </LogBoxButton>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  frameContainer: {\n    flexDirection: \"row\",\n    paddingHorizontal: 15,\n  },\n  frame: {\n    flex: 1,\n    paddingVertical: 4,\n    paddingHorizontal: 10,\n    borderRadius: 5,\n  },\n  lineLocation: {\n    flexDirection: \"row\",\n  },\n  name: {\n    color: LogBoxStyle.getTextColor(1),\n    fontSize: 14,\n    includeFontPadding: false,\n    lineHeight: 18,\n    fontWeight: \"400\",\n    fontFamily: CODE_FONT,\n  },\n  location: {\n    color: LogBoxStyle.getTextColor(0.8),\n    fontSize: 12,\n    fontWeight: \"300\",\n    includeFontPadding: false,\n    lineHeight: 16,\n    paddingLeft: 10,\n  },\n  dim: {\n    color: LogBoxStyle.getTextColor(0.4),\n    fontWeight: \"300\",\n  },\n  line: {\n    color: LogBoxStyle.getTextColor(0.8),\n    fontSize: 12,\n    fontWeight: \"300\",\n    includeFontPadding: false,\n    lineHeight: 16,\n  },\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}