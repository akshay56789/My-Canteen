{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport { useNavigationContainerRef } from \"@react-navigation/native\";\nimport { useSyncExternalStore, useMemo, Fragment } from \"react\";\nimport { getRouteInfoFromState } from \"../LocationProvider\";\nimport { getPathDataFromState } from \"../fork/getPathFromState\";\nimport { getLinkingConfig } from \"../getLinkingConfig\";\nimport { getRoutes } from \"../getRoutes\";\nimport { getQualifiedRouteComponent } from \"../useScreens\";\nimport { _internal_maybeHideAsync } from \"../views/Splash\";\nimport { goBack, linkTo, push, replace, setParams } from \"./routing\";\nimport { getSortedRoutes } from \"./sort-routes\";\nexport var RouterStore = function () {\n  function RouterStore() {\n    var _this = this;\n\n    _classCallCheck(this, RouterStore);\n\n    this.isReady = false;\n    this.rootStateSubscribers = new Set();\n    this.storeSubscribers = new Set();\n    this.linkTo = linkTo.bind(this);\n    this.getSortedRoutes = getSortedRoutes.bind(this);\n    this.goBack = goBack.bind(this);\n    this.push = push.bind(this);\n    this.replace = replace.bind(this);\n    this.setParams = setParams.bind(this);\n\n    this.onReady = function () {\n      if (!_this.isReady) {\n        requestAnimationFrame(function () {\n          return _internal_maybeHideAsync();\n        });\n      }\n\n      _this.isReady = true;\n    };\n\n    this.subscribeToRootState = function (subscriber) {\n      _this.rootStateSubscribers.add(subscriber);\n\n      return function () {\n        return _this.rootStateSubscribers.delete(subscriber);\n      };\n    };\n\n    this.subscribeToStore = function (subscriber) {\n      _this.storeSubscribers.add(subscriber);\n\n      return function () {\n        return _this.storeSubscribers.delete(subscriber);\n      };\n    };\n\n    this.snapshot = function () {\n      return _this;\n    };\n\n    this.rootStateSnapshot = function () {\n      return _this.rootState;\n    };\n\n    this.routeInfoSnapshot = function () {\n      return _this.routeInfo;\n    };\n  }\n\n  _createClass(RouterStore, [{\n    key: \"initialize\",\n    value: function initialize(context, navigationRef, initialLocation) {\n      var _this$navigationRefSu,\n          _this2 = this;\n\n      this.isReady ||= Boolean(initialLocation);\n      this.initialState = undefined;\n      this.rootState = undefined;\n      this.routeInfo = undefined;\n      this.linking = undefined;\n      (_this$navigationRefSu = this.navigationRefSubscription) == null ? void 0 : _this$navigationRefSu.call(this);\n      this.rootStateSubscribers.clear();\n      this.storeSubscribers.clear();\n      this.routeNode = getRoutes(context);\n      this.rootComponent = this.routeNode ? getQualifiedRouteComponent(this.routeNode) : Fragment;\n\n      if (!this.routeNode && process.env.NODE_ENV === \"production\") {\n        throw new Error(\"No routes found\");\n      }\n\n      this.navigationRef = navigationRef;\n\n      if (this.routeNode) {\n        this.linking = getLinkingConfig(this.routeNode);\n\n        if (initialLocation) {\n          var _this$linking$getStat, _this$linking;\n\n          this.initialState = (_this$linking$getStat = (_this$linking = this.linking).getStateFromPath) == null ? void 0 : _this$linking$getStat.call(_this$linking, initialLocation.pathname + initialLocation.search, this.linking.config);\n        }\n      }\n\n      if (this.initialState) {\n        this.rootState = this.initialState;\n        this.routeInfo = this.getRouteInfo(this.initialState);\n      } else {\n        this.routeInfo = {\n          unstable_globalHref: \"\",\n          pathname: \"\",\n          params: {},\n          segments: []\n        };\n      }\n\n      this.navigationRefSubscription = navigationRef.addListener(\"state\", function (data) {\n        var state = data.data.state;\n\n        if (navigationRef.isReady()) {\n          _this2.onReady();\n        }\n\n        if (state && state !== _this2.rootState) {\n          _this2.rootState = state;\n          _this2.routeInfo = _this2.getRouteInfo(state);\n\n          for (var subscriber of _this2.rootStateSubscribers) {\n            subscriber();\n          }\n        }\n      });\n\n      for (var subscriber of this.storeSubscribers) {\n        subscriber();\n      }\n    }\n  }, {\n    key: \"getRouteInfo\",\n    value: function getRouteInfo(state) {\n      var _this3 = this;\n\n      return getRouteInfoFromState(function (state, asPath) {\n        var _this3$linking;\n\n        return getPathDataFromState(state, _objectSpread(_objectSpread({\n          screens: []\n        }, (_this3$linking = _this3.linking) == null ? void 0 : _this3$linking.config), {}, {\n          preserveDynamicRoutes: asPath,\n          preserveGroups: asPath\n        }));\n      }, state);\n    }\n  }, {\n    key: \"shouldShowTutorial\",\n    value: function shouldShowTutorial() {\n      return !this.routeNode && process.env.NODE_ENV === \"development\";\n    }\n  }]);\n\n  return RouterStore;\n}();\nexport var store = new RouterStore();\nexport function useExpoRouter() {\n  return useSyncExternalStore(store.subscribeToStore, store.snapshot, store.snapshot);\n}\nexport function useStoreRootState() {\n  return useSyncExternalStore(store.subscribeToRootState, store.rootStateSnapshot, store.rootStateSnapshot);\n}\nexport function useStoreRouteInfo() {\n  return useSyncExternalStore(store.subscribeToRootState, store.routeInfoSnapshot, store.routeInfoSnapshot);\n}\nexport function useInitializeExpoRouter(context, initialLocation) {\n  var navigationRef = useNavigationContainerRef();\n  useMemo(function () {\n    return store.initialize(context, navigationRef, initialLocation);\n  }, [context, initialLocation]);\n  useExpoRouter();\n  return store;\n}","map":{"version":3,"names":["useNavigationContainerRef","useSyncExternalStore","useMemo","Fragment","getRouteInfoFromState","getPathDataFromState","getLinkingConfig","getRoutes","getQualifiedRouteComponent","_internal_maybeHideAsync","goBack","linkTo","push","replace","setParams","getSortedRoutes","RouterStore","isReady","rootStateSubscribers","Set","storeSubscribers","bind","onReady","requestAnimationFrame","subscribeToRootState","subscriber","add","delete","subscribeToStore","snapshot","rootStateSnapshot","rootState","routeInfoSnapshot","routeInfo","context","navigationRef","initialLocation","Boolean","initialState","undefined","linking","navigationRefSubscription","clear","routeNode","rootComponent","process","env","NODE_ENV","Error","getStateFromPath","pathname","search","config","getRouteInfo","unstable_globalHref","params","segments","addListener","data","state","asPath","screens","preserveDynamicRoutes","preserveGroups","store","useExpoRouter","useStoreRootState","useStoreRouteInfo","useInitializeExpoRouter","initialize"],"sources":["C:/Users/hello/OneDrive/Desktop/React-native/canteen-project/client/node_modules/expo-router/src/global-state/router-store.ts"],"sourcesContent":["import {\n  NavigationContainerRefWithCurrent,\n  getPathFromState,\n  useNavigationContainerRef,\n} from \"@react-navigation/native\";\nimport { useSyncExternalStore, useMemo, ComponentType, Fragment } from \"react\";\n\nimport { UrlObject, getRouteInfoFromState } from \"../LocationProvider\";\nimport { RouteNode } from \"../Route\";\nimport { getPathDataFromState } from \"../fork/getPathFromState\";\nimport { ResultState } from \"../fork/getStateFromPath\";\nimport { ExpoLinkingOptions, getLinkingConfig } from \"../getLinkingConfig\";\nimport { getRoutes } from \"../getRoutes\";\nimport { RequireContext } from \"../types\";\nimport { getQualifiedRouteComponent } from \"../useScreens\";\nimport { _internal_maybeHideAsync } from \"../views/Splash\";\nimport { goBack, linkTo, push, replace, setParams } from \"./routing\";\nimport { getSortedRoutes } from \"./sort-routes\";\n\n/**\n * This is the global state for the router. It is used to keep track of the current route, and to provide a way to navigate to other routes.\n *\n * There should only be one instance of this class and be initialized via `useInitializeExpoRouter`\n */\nexport class RouterStore {\n  routeNode!: RouteNode | null;\n  rootComponent!: ComponentType;\n  linking: ExpoLinkingOptions | undefined;\n  isReady: boolean = false;\n\n  initialState: ResultState | undefined;\n  rootState: ResultState | undefined;\n  routeInfo?: UrlObject | undefined;\n\n  navigationRef!: NavigationContainerRefWithCurrent<ReactNavigation.RootParamList>;\n  navigationRefSubscription!: () => void;\n\n  rootStateSubscribers = new Set<() => void>();\n  storeSubscribers = new Set<() => void>();\n\n  linkTo = linkTo.bind(this);\n  getSortedRoutes = getSortedRoutes.bind(this);\n  goBack = goBack.bind(this);\n  push = push.bind(this);\n  replace = replace.bind(this);\n  setParams = setParams.bind(this);\n\n  initialize(\n    context: RequireContext,\n    navigationRef: NavigationContainerRefWithCurrent<ReactNavigation.RootParamList>,\n    initialLocation?: URL\n  ) {\n    // Clean up any previous state\n    this.isReady ||= Boolean(initialLocation);\n    this.initialState = undefined;\n    this.rootState = undefined;\n    this.routeInfo = undefined;\n    this.linking = undefined;\n    this.navigationRefSubscription?.();\n    this.rootStateSubscribers.clear();\n    this.storeSubscribers.clear();\n\n    this.routeNode = getRoutes(context);\n    this.rootComponent = this.routeNode\n      ? getQualifiedRouteComponent(this.routeNode)\n      : Fragment;\n\n    // Only error in production, in development we will show the onboarding screen\n    if (!this.routeNode && process.env.NODE_ENV === \"production\") {\n      throw new Error(\"No routes found\");\n    }\n\n    this.navigationRef = navigationRef;\n\n    if (this.routeNode) {\n      this.linking = getLinkingConfig(this.routeNode!);\n\n      if (initialLocation) {\n        this.initialState = this.linking.getStateFromPath?.(\n          initialLocation.pathname + initialLocation.search,\n          this.linking.config\n        );\n      }\n    }\n\n    // There is no routeNode, so we will be showing the onboarding screen\n    // In the meantime, just mock the routeInfo\n    if (this.initialState) {\n      this.rootState = this.initialState;\n      this.routeInfo = this.getRouteInfo(this.initialState);\n    } else {\n      this.routeInfo = {\n        unstable_globalHref: \"\",\n        pathname: \"\",\n        params: {},\n        segments: [],\n      };\n    }\n\n    this.navigationRefSubscription = navigationRef.addListener(\n      \"state\",\n      (data) => {\n        const state = data.data.state as ResultState;\n\n        if (navigationRef.isReady()) {\n          this.onReady();\n        }\n\n        // This can sometimes be undefined when an error is thrown in the Root Layout Route.\n        if (state && state !== this.rootState) {\n          this.rootState = state;\n          this.routeInfo = this.getRouteInfo(state);\n\n          for (const subscriber of this.rootStateSubscribers) {\n            subscriber();\n          }\n        }\n      }\n    );\n\n    for (const subscriber of this.storeSubscribers) {\n      subscriber();\n    }\n  }\n\n  getRouteInfo(state: ResultState) {\n    return getRouteInfoFromState(\n      (state: Parameters<typeof getPathFromState>[0], asPath: boolean) => {\n        return getPathDataFromState(state, {\n          screens: [],\n          ...this.linking?.config,\n          preserveDynamicRoutes: asPath,\n          preserveGroups: asPath,\n        });\n      },\n      state\n    );\n  }\n\n  // This is only used in development, to show the onboarding screen\n  // In production we should have errored during the initialization\n  shouldShowTutorial() {\n    return !this.routeNode && process.env.NODE_ENV === \"development\";\n  }\n\n  /** Make sure these are arrow functions so `this` is correctly bound */\n  onReady = () => {\n    if (!this.isReady) {\n      requestAnimationFrame(() => _internal_maybeHideAsync());\n    }\n    this.isReady = true;\n  };\n  subscribeToRootState = (subscriber: () => void) => {\n    this.rootStateSubscribers.add(subscriber);\n    return () => this.rootStateSubscribers.delete(subscriber);\n  };\n  subscribeToStore = (subscriber: () => void) => {\n    this.storeSubscribers.add(subscriber);\n    return () => this.storeSubscribers.delete(subscriber);\n  };\n  snapshot = () => {\n    return this;\n  };\n  rootStateSnapshot = () => {\n    return this.rootState!;\n  };\n  routeInfoSnapshot = () => {\n    return this.routeInfo!;\n  };\n}\n\nexport const store = new RouterStore();\n\nexport function useExpoRouter() {\n  return useSyncExternalStore(\n    store.subscribeToStore,\n    store.snapshot,\n    store.snapshot\n  );\n}\n\nexport function useStoreRootState() {\n  return useSyncExternalStore(\n    store.subscribeToRootState,\n    store.rootStateSnapshot,\n    store.rootStateSnapshot\n  );\n}\n\nexport function useStoreRouteInfo() {\n  return useSyncExternalStore(\n    store.subscribeToRootState,\n    store.routeInfoSnapshot,\n    store.routeInfoSnapshot\n  );\n}\n\nexport function useInitializeExpoRouter(\n  context: RequireContext,\n  initialLocation: URL | undefined\n) {\n  const navigationRef = useNavigationContainerRef();\n  useMemo(\n    () => store.initialize(context, navigationRef, initialLocation),\n    [context, initialLocation]\n  );\n  useExpoRouter();\n  return store;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}