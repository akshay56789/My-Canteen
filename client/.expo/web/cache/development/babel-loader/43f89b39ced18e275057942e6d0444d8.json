{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createStringifySafeWithLimits = void 0;\n\nfunction createStringifySafeWithLimits(limits) {\n  var _limits$maxDepth = limits.maxDepth,\n      maxDepth = _limits$maxDepth === void 0 ? Number.POSITIVE_INFINITY : _limits$maxDepth,\n      _limits$maxStringLimi = limits.maxStringLimit,\n      maxStringLimit = _limits$maxStringLimi === void 0 ? Number.POSITIVE_INFINITY : _limits$maxStringLimi,\n      _limits$maxArrayLimit = limits.maxArrayLimit,\n      maxArrayLimit = _limits$maxArrayLimit === void 0 ? Number.POSITIVE_INFINITY : _limits$maxArrayLimit,\n      _limits$maxObjectKeys = limits.maxObjectKeysLimit,\n      maxObjectKeysLimit = _limits$maxObjectKeys === void 0 ? Number.POSITIVE_INFINITY : _limits$maxObjectKeys;\n  var stack = [];\n\n  function replacer(_key, value) {\n    while (stack.length && this !== stack[0]) {\n      stack.shift();\n    }\n\n    if (typeof value === \"string\") {\n      var truncatedString = \"...(truncated)...\";\n\n      if (value.length > maxStringLimit + truncatedString.length) {\n        return value.substring(0, maxStringLimit) + truncatedString;\n      }\n\n      return value;\n    }\n\n    if (typeof value !== \"object\" || value === null) {\n      return value;\n    }\n\n    var retval = value;\n\n    if (Array.isArray(value)) {\n      if (stack.length >= maxDepth) {\n        retval = \"[ ... array with \" + value.length + \" values ... ]\";\n      } else if (value.length > maxArrayLimit) {\n        retval = value.slice(0, maxArrayLimit).concat([\"... extra \" + (value.length - maxArrayLimit) + \" values truncated ...\"]);\n      }\n    } else {\n      if (typeof value !== \"object\") {\n        throw new Error(\"This was already found earlier\");\n      }\n\n      var keys = Object.keys(value);\n\n      if (stack.length >= maxDepth) {\n        retval = \"{ ... object with \" + keys.length + \" keys ... }\";\n      } else if (keys.length > maxObjectKeysLimit) {\n        retval = {};\n\n        for (var k of keys.slice(0, maxObjectKeysLimit)) {\n          retval[k] = value[k];\n        }\n\n        var truncatedKey = \"...(truncated keys)...\";\n        retval[truncatedKey] = keys.length - maxObjectKeysLimit;\n      }\n    }\n\n    stack.unshift(retval);\n    return retval;\n  }\n\n  return function stringifySafe(arg) {\n    if (arg === undefined) {\n      return \"undefined\";\n    } else if (arg === null) {\n      return \"null\";\n    } else if (typeof arg === \"function\") {\n      try {\n        return arg.toString();\n      } catch (_unused) {\n        return \"[function unknown]\";\n      }\n    } else if (arg instanceof Error) {\n      return arg.name + \": \" + arg.message;\n    } else {\n      try {\n        var ret = JSON.stringify(arg, replacer);\n\n        if (ret === undefined) {\n          return '[\"' + typeof arg + '\" failed to stringify]';\n        }\n\n        return ret;\n      } catch (_unused2) {\n        if (typeof arg.toString === \"function\") {\n          try {\n            return arg.toString();\n          } catch (_unused3) {}\n        }\n      }\n    }\n\n    return '[\"' + typeof arg + '\" failed to stringify]';\n  };\n}\n\nexports.createStringifySafeWithLimits = createStringifySafeWithLimits;\nvar stringifySafe = createStringifySafeWithLimits({\n  maxDepth: 10,\n  maxStringLimit: 100,\n  maxArrayLimit: 50,\n  maxObjectKeysLimit: 50\n});\nexports.default = stringifySafe;","map":{"version":3,"sources":["../../../../src/error-overlay/modules/stringifySafe/index.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Evan Bacon.\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/**\n * Tries to stringify with JSON.stringify and toString, but catches exceptions\n * (e.g. from circular objects) and always returns a string and never throws.\n */\nexport function createStringifySafeWithLimits(limits: {\n  maxDepth?: number;\n  maxStringLimit?: number;\n  maxArrayLimit?: number;\n  maxObjectKeysLimit?: number;\n}): (foo: any) => string {\n  const {\n    maxDepth = Number.POSITIVE_INFINITY,\n    maxStringLimit = Number.POSITIVE_INFINITY,\n    maxArrayLimit = Number.POSITIVE_INFINITY,\n    maxObjectKeysLimit = Number.POSITIVE_INFINITY,\n  } = limits;\n  const stack: any[] = [];\n  function replacer(this: unknown, _key: string, value: any): any {\n    while (stack.length && this !== stack[0]) {\n      stack.shift();\n    }\n\n    if (typeof value === \"string\") {\n      const truncatedString = \"...(truncated)...\";\n      if (value.length > maxStringLimit + truncatedString.length) {\n        return value.substring(0, maxStringLimit) + truncatedString;\n      }\n      return value;\n    }\n    if (typeof value !== \"object\" || value === null) {\n      return value;\n    }\n\n    let retval = value;\n    if (Array.isArray(value)) {\n      if (stack.length >= maxDepth) {\n        retval = `[ ... array with ${value.length} values ... ]`;\n      } else if (value.length > maxArrayLimit) {\n        retval = value\n          .slice(0, maxArrayLimit)\n          .concat([\n            `... extra ${value.length - maxArrayLimit} values truncated ...`,\n          ]);\n      }\n    } else {\n      // Add refinement after Array.isArray call.\n      if (typeof value !== \"object\") {\n        throw new Error(\"This was already found earlier\");\n      }\n      const keys = Object.keys(value);\n      if (stack.length >= maxDepth) {\n        retval = `{ ... object with ${keys.length} keys ... }`;\n      } else if (keys.length > maxObjectKeysLimit) {\n        // Return a sample of the keys.\n        retval = {};\n        for (const k of keys.slice(0, maxObjectKeysLimit)) {\n          retval[k] = value[k];\n        }\n        const truncatedKey = \"...(truncated keys)...\";\n        retval[truncatedKey] = keys.length - maxObjectKeysLimit;\n      }\n    }\n    stack.unshift(retval);\n    return retval;\n  }\n\n  return function stringifySafe(arg: any): string {\n    if (arg === undefined) {\n      return \"undefined\";\n    } else if (arg === null) {\n      return \"null\";\n    } else if (typeof arg === \"function\") {\n      try {\n        return arg.toString();\n      } catch {\n        return \"[function unknown]\";\n      }\n    } else if (arg instanceof Error) {\n      return arg.name + \": \" + arg.message;\n    } else {\n      // Perform a try catch, just in case the object has a circular\n      // reference or stringify throws for some other reason.\n      try {\n        const ret = JSON.stringify(arg, replacer);\n        if (ret === undefined) {\n          return '[\"' + typeof arg + '\" failed to stringify]';\n        }\n        return ret;\n      } catch {\n        if (typeof arg.toString === \"function\") {\n          try {\n            // $FlowFixMe[incompatible-use] : toString shouldn't take any arguments in general.\n            return arg.toString();\n          } catch {}\n        }\n      }\n    }\n    return '[\"' + typeof arg + '\" failed to stringify]';\n  };\n}\n\nconst stringifySafe = createStringifySafeWithLimits({\n  maxDepth: 10,\n  maxStringLimit: 100,\n  maxArrayLimit: 50,\n  maxObjectKeysLimit: 50,\n});\n\nexport default stringifySafe;\n"],"sourceRoot":""},"metadata":{},"sourceType":"script"}