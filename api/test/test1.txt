// const bcrypt = require("bcrypt");
// const jwt = require("jsonwebtoken");
// const express = require("express");
// const router = express.Router();
// const Canteen = require("../models/Canteen");
// const { body, validationResult } = require("express-validator");
// const fetchCanteen = require("../middleware/canteenAuth");
// const Fooditem = require("../models/Item");
// const dotenv = require("dotenv");
// dotenv.config();

// //Register a canteen
// router.post(
//   "/register",
//   [
//     body("name", "Enter a valid name").isLength({ min: 3 }),
//     body("address", "Enter proper address").isLength({ min: 5 }),
//     body("phoneNumber", "Phone number must be 10 digits").isLength({ max: 10 }),
//     body("password", "Password must be atleast 8 characters").isLength({
//       min: 8,
//     }),
//     body("email", "Enter a valid email.").isEmail(),
//   ],
//   async (req, res) => {
//     let success = false;
//     const errors = validationResult(req);
//     if (!errors.isEmpty()) {
//       return res.status(400).json({ errors: errors.array() });
//     }
//     try {
//       let admin = await Canteen.findOne({ email: req.body.email });
//       if (admin) {
//         return res
//           .status(500)
//           .json({ success, error: "Email already exists." });
//       }
//       const salt = await bcrypt.genSalt(10);
//       const hashedPass = await bcrypt.hash(req.body.password, salt);

//       admin = await Canteen.create({
//         name: req.body.name,
//         address: req.body.address,
//         description: req.body.description,
//         phoneNumber: req.body.phoneNumber,
//         password: hashedPass,
//         email: req.body.email,
//       });

//       const data = {
//         admin: {
//           id: admin.id,
//         },
//       };

//       const authtoken = jwt.sign(data, process.env.JWT_secret);
//       success = true;
//       res.json({ success, authtoken });
//     } catch (error) {
//       console.log(error.message);
//       res.status(500).send("Some error occured.");
//     }
//   }
// );

// // canteen admin login:

// router.post(
//   "/signin",
//   [
//     body("email", "Enter a valid email.").isEmail(),
//     body("password", "Password should be atleast 8 characters.").exists(),
//   ],
//   async (req, res) => {
//     let success = false;
//     const errors = validationResult(req);
//     if (!errors.isEmpty()) {
//       return res.status(400).json({ errors: errors.array() });
//     }
//     const { email, password } = req.body;
//     try {
//       let admin = await Canteen.findOne({ email });
//       const passwordCompare = await bcrypt.compare(password, admin.password);
//       if(admin && passwordCompare){
//         const data = {
//           admin: {
//             id: admin.id,
//           },
//         };
//         const authtoken = jwt.sign(data, process.env.JWT_secret);
//       success = true;
//       res.json({ success, authtoken, admin});
//       }
//       else{
//         success = false
//         return res
//         .status(400)
//         .json({success, error: "Please try to login with correct credentials." });
//       } 
//     } catch (error) {
//       console.error(error.message);
//       res.status(500).send("Some error occured.");
//     }
//   }
// );

// // get canteen details
// router.get("/getcanteendetails/:id", async (req, res) => {
//   const id = req.params.id;
//   try {
//     const canteen = await Canteen.findById(id).select([
//       "-phoneNumber",
//       "-password",
//       "-email",
//       "-dateCreated",
//     ]).populate({path: 'menu', select: ['itemName','itemImage','itemPrice','availability','canteenId']}).exec();
//     //const canteen = await Canteen.findById(id).select()
//     res.send(canteen);
//   } catch (error) {
//     console.error(error.message);
//     res.status(500).send("Some error occured.");
//   }
// });



// //add food items:
// router.post("/itemadd", fetchCanteen, async (req, res) => {
//   try {
//     const canteenId = req.admin.id;
//     const { itemName, itemImage, itemPrice, availability } = req.body;
//     const newItem = new Fooditem({
//       itemName,
//       canteenId,
//       itemImage,
//       itemPrice,
//       availability,
//     });
//     await newItem.save();
//     const mycanteen = await Canteen.findById(canteenId);
//     // if(mycanteen.menu.includes(newItem.id)){
//     //   res.status(200).json({
//     //     message: "Food Item already exists in the menu.",
//     //     newItem
//     //   });
//     // }
//     // else{
//     //   mycanteen.menu.push(newItem.id);
//     //   mycanteen.save();
//     //   return res.status(200).json({ message: "Item added successfully!", newItem, mycanteen });
      
//     // }
//     mycanteen.menu.push(newItem.id);
//     mycanteen.save();
//     res.status(200).json({ message: "Item added successfully!", newItem, mycanteen });
    
//   } catch (error) {
//     return res.status(500).json({ error: "Internal server error!" });
//   }
// });

// module.exports = router;



################################################################################################33

// const express = require('express');
// const router = express.Router();
// const Fooditem = require('../models/FoodItem');
// const {body, validationResult} = require('express-validator');

// router.post('/itemadd', async (req, res)=>{
//     try{
//         const {itemName, itemImage, itemPrice, availability} = req.body;
//         const newItem = new Fooditem({itemName, itemImage, itemPrice, availability});
//         await newItem.save();
//         return res.status(200).json({message: 'Item added successfully!'});
//     }
//     catch (error){
//         return res.status(500).json({error: 'Internal server error!'})
//     }
// });

// module.exports = router;

###########################################################################################################

// const bcrypt = require("bcrypt");
// const jwt = require("jsonwebtoken");
// const express = require("express");
// const router = express.Router();
// const User = require("../models/User");
// const Canteen = require("../models/Canteen");
// const { body, validationResult } = require("express-validator");
// const fetchuser = require("../middleware/userAuth");
// const FoodItem = require("../models/FoodItem");
// const dotenv = require("dotenv");
// const generateToken = require('../utils/generateToken')
// dotenv.config();

//@desc
//@route
// router.post(
//   "/register",
//   [
//     body("name", "Enter a valid name").isLength({ min: 3 }),
//     body("password", "Password should be atleast 8 characters").isLength({
//       min: 8,
//     }),
//     body("email", "Enter a valid email").isEmail(),
//   ],
//   async (req, res) => {
//     let success = false;
//     const errors = validationResult(req);
//     if (!errors.isEmpty()) {
//       return res.status(400).json({ errors: errors.array() });
//     }
//     try {
//       let user = await User.findOne({ email: req.body.email });
//       if (user) {
//         return res
//           .status(400)
//           .json({ success, error: "Email already exists!" });
//       }
//       const salt = await bcrypt.genSalt(10);
//       const hashedPass = await bcrypt.hash(req.body.password, salt);

//       user = await User.create({
//         name: req.body.name,
//         password: hashedPass,
//         email: req.body.email,
//       });
//       const data = {
//         admin: {
//           id: user.id,
//         },
//       };
      
//       const authtoken = jwt.sign(data, process.env.JWT_secret);
//       success = true;
//       res.json({ success, token: authtoken, user: user });
//     } catch (error) {
//       console.log(error.message);
//       res.status(500).send("Some error occured!");
//     }
//   }
// );

// @desc
// @route
// router.post(
//   "/login",
//   [
//     body("password", "Password cannot be blank!").exists(),
//     body("email", "Enter a valid email.").isEmail(),
//   ],
//   async (req, res) => {
//     let success = false;
//     const errors = validationResult(req);
//     if (!errors.isEmpty()) {
//       return res.status(400).json({ errors: errors.array() });
//     }

//     const { email, password } = req.body;
//     try {
//       let user = await User.findOne({ email })
//         .populate({ path: "savedCanteens", select: ["name", "workingStatus"] })
//         .exec();
//       const passwordCompare = await bcrypt.compare(password, user.password);
//       if(user && passwordCompare){
//         success = true;
//         const data = {
//           admin: {
//             id: user.id,
//           },
//         };
        
//         const authtoken = jwt.sign(data, process.env.JWT_secret);
//         res.json({ 
//         success,
//         token: authtoken, 
//         _id: user._id,
//         name: user.name,
//         email: user.email,
//         savedCanteens: user.savedCanteens
//       });
//       }
//       else{
//         success = false
//         return res
//           .status(400)
//           .json({success, error: "Please try to log in with correct credentials." });
//       }
      
//     } catch (error) {
//       console.log(error.message);
//       res.status(500).send("Some error occured!");
//     }
//   }
// );

// @desc
// @route
// router.put(
//   "/updateprofile",
//   fetchuser,
//   [
//     body("name", "Enter a valid name").isLength({ min: 3 }),
//     body("email", "Email should be valid").isEmail(),
//   ],
//   async (req, res) => {
//     const newdata = req.body;
//     const errors = validationResult(req);
//     if (!errors.isEmpty()) {
//       return res.status(500).json({ error: errors.array() });
//     }
//     try {
//       let userId = req.user.admin.id;
//       let userdata = await User.findByIdAndUpdate(userId, newdata);
//       if (!userdata) {
//         return res.status(404).json({ error: "User not found." });
//       }
//       return res
//         .status(200)
//         .json({ message: "Updated successfully!", newdata });
//     } catch (error) {
//       res.status(500).json({ error: 'Failed to update profile.' });
//     }
//   }
// );

// router.put('/updateprofile',
// [
//   body("name", "Enter a valid name").isLength({ min: 3 }),
//   body("email", "Email should be valid").isEmail(),
// ],fetchuser, async(req, res)=>{
//   const errors = validationResult(req);
//   if (!errors.isEmpty()) {
//       return res.status(500).json({ error: errors.array() });
//   }
//     let userId = req.user.admin.id
//     const userdata = await User.findById(userId)
//     console.log(userdata)
//     if(userdata){
//       userdata.name = req.body.name || userdata.name
//       userdata.email = req.body.email || userdata.email
    
//     const updatedUser = await userdata.save()
//     res.json({
//       message: 'Updated Successfully',
//       updatedUser
//     })
//   }
//   else{
//     res.status(404).json({error: 'User not found!'})
//   }
  
// })

// @desc
// @route
// router.put(
//   "/updatepassword",
//   fetchuser,
//   [
//     body("newpassword", "Passsword should be atleast 8 characters.").isLength({
//       min: 8,
//     }),
//   ],
//   async (req, res) => {
//     const errors = validationResult(req);
//     if (!errors.isEmpty()) {
//       return res.status(500).json({ error: errors.array() });
//     }
//     let success = false;
//     const { oldpassword, newpassword } = req.body;
//     try {
//       let userId = req.user.admin.id;
//       const userdata = await User.findById(userId);
//       if (oldpassword && newpassword) {
//         const passwordCompare = await bcrypt.compare(
//           oldpassword,
//           userdata.password
//         );
//         if (!passwordCompare) {
//           return res.send("Invalid old password!");
//         }
//         const salt = await bcrypt.genSalt(10);
//         const hashedPassword = await bcrypt.hash(newpassword, salt);
//         let newdata = await User.updateOne(
//           { _id: userId },
//           { $set: { password: hashedPassword } }
//         );
//         if (!newdata) {
//           return res.send("Password could not be updated");
//         }
//         success = true;
//         return res.status(200).json({
//           success,
//           message: "Password updated successfully!",
//           newdata,
//         });
//       }
//     } catch (error) {
//       return res.status(500).json({ message: "Internal Server Error!" });
//     }
//   }
// );

// // @desc
// // @route
// router.get("/getdetails", fetchuser, async (req, res) => {
//   try {
//     const userId = req.user.id;
//     const user = await User.findById(userId)
//       .select("-password")
//       .populate({ path: "savedCanteens", select: ["name", "workingStatus"] })
//       .exec();
//     res.send(user);
//   } catch (error) {
//     console.error(error.message);
//     res.status(500).send("Some error occured.");
//   }
// });

// // @desc
// // @route
// router.post("/saveCanteens/:canteenId", async (req, res) => {
//   console.log(req.params.canteenId);
//   try {
//     const userId = req.body.userId;
//     const canteenId = req.params.canteenId;

//     const user = await User.findById(userId);
//     const findcanteen = await Canteen.findById(canteenId)
//       .select("-password")
//       .populate("menu")
//       .exec();

//     if (findcanteen && user) {
//       console.log("mai");
//       if (user.savedCanteens.includes(canteenId)) {
//         console.log("already");
//         res.status(200).json({
//           message: "This canteen already exists in the [Saved Canteens].",
//           canteen: findcanteen,
//         });
//       } else {
//         console.log("nahi hai");
//         user.savedCanteens.push(canteenId);
//         user.save();
//         res.status(200).json({
//           message: "Canteen saved in the profile!",
//           canteen: findcanteen,
//         });
//       }
//     } else {
//       res.send("Some error occured!");
//     }
//   } catch (error) {
//     console.log(error.message);
//     return res.status(500).send("Some error occured!");
//   }
// });

// module.exports = router;